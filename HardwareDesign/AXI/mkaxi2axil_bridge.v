//
// Generated by Bluespec Compiler, version 2025.01.1 (build 65e3a87a)
//
// On Sun Jun  8 23:47:15 CEST 2025
//
//
// Ports:
// Name                         I/O  size props
// AXI4_AWREADY                   O     1 reg
// AXI4_WREADY                    O     1 reg
// AXI4_BVALID                    O     1 reg
// AXI4_BRESP                     O     2 reg
// AXI4_ARREADY                   O     1 reg
// AXI4_RVALID                    O     1 reg
// AXI4_RDATA                     O    32 reg
// AXI4_RRESP                     O     2 reg
// AXI4_RLAST                     O     1 reg
// AXI4L_AWVALID                  O     1 reg
// AXI4L_AWADDR                   O    32 reg
// AXI4L_AWPROT                   O     3 reg
// AXI4L_WVALID                   O     1 reg
// AXI4L_WDATA                    O    32 reg
// AXI4L_WSTRB                    O     4 reg
// AXI4L_BREADY                   O     1 reg
// AXI4L_ARVALID                  O     1 reg
// AXI4L_ARADDR                   O    32 reg
// AXI4L_ARPROT                   O     3 reg
// AXI4L_RREADY                   O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// AXI4_AWVALID                   I     1
// AXI4_AWADDR                    I    32 reg
// AXI4_AWLEN                     I     8 reg
// AXI4_AWSIZE                    I     3 reg
// AXI4_AWBURST                   I     2 reg
// AXI4_AWLOCK                    I     1 reg
// AXI4_AWCACHE                   I     4 reg
// AXI4_AWPROT                    I     3 reg
// AXI4_AWQOS                     I     4 reg
// AXI4_AWREGION                  I     4 reg
// AXI4_WVALID                    I     1
// AXI4_WDATA                     I    32 reg
// AXI4_WSTRB                     I     4 reg
// AXI4_WLAST                     I     1 reg
// AXI4_BREADY                    I     1
// AXI4_ARVALID                   I     1
// AXI4_ARADDR                    I    32 reg
// AXI4_ARLEN                     I     8 reg
// AXI4_ARSIZE                    I     3 reg
// AXI4_ARBURST                   I     2 reg
// AXI4_ARLOCK                    I     1 reg
// AXI4_ARCACHE                   I     4 reg
// AXI4_ARPROT                    I     3 reg
// AXI4_ARQOS                     I     4 reg
// AXI4_ARREGION                  I     4 reg
// AXI4_RREADY                    I     1
// AXI4L_AWREADY                  I     1
// AXI4L_WREADY                   I     1
// AXI4L_BVALID                   I     1
// AXI4L_BRESP                    I     2 reg
// AXI4L_ARREADY                  I     1
// AXI4L_RVALID                   I     1
// AXI4L_RRESP                    I     2 reg
// AXI4L_RDATA                    I    32 reg
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkaxi2axil_bridge(CLK,
			 RST_N,

			 AXI4_AWVALID,
			 AXI4_AWADDR,
			 AXI4_AWLEN,
			 AXI4_AWSIZE,
			 AXI4_AWBURST,
			 AXI4_AWLOCK,
			 AXI4_AWCACHE,
			 AXI4_AWPROT,
			 AXI4_AWQOS,
			 AXI4_AWREGION,

			 AXI4_AWREADY,

			 AXI4_WVALID,
			 AXI4_WDATA,
			 AXI4_WSTRB,
			 AXI4_WLAST,

			 AXI4_WREADY,

			 AXI4_BVALID,

			 AXI4_BRESP,

			 AXI4_BREADY,

			 AXI4_ARVALID,
			 AXI4_ARADDR,
			 AXI4_ARLEN,
			 AXI4_ARSIZE,
			 AXI4_ARBURST,
			 AXI4_ARLOCK,
			 AXI4_ARCACHE,
			 AXI4_ARPROT,
			 AXI4_ARQOS,
			 AXI4_ARREGION,

			 AXI4_ARREADY,

			 AXI4_RVALID,

			 AXI4_RDATA,

			 AXI4_RRESP,

			 AXI4_RLAST,

			 AXI4_RREADY,

			 AXI4L_AWVALID,

			 AXI4L_AWADDR,

			 AXI4L_AWPROT,

			 AXI4L_AWREADY,

			 AXI4L_WVALID,

			 AXI4L_WDATA,

			 AXI4L_WSTRB,

			 AXI4L_WREADY,

			 AXI4L_BVALID,
			 AXI4L_BRESP,

			 AXI4L_BREADY,

			 AXI4L_ARVALID,

			 AXI4L_ARADDR,

			 AXI4L_ARPROT,

			 AXI4L_ARREADY,

			 AXI4L_RVALID,
			 AXI4L_RRESP,
			 AXI4L_RDATA,

			 AXI4L_RREADY);
  input  CLK;
  input  RST_N;

  // action method axi4_side_m_awvalid
  input  AXI4_AWVALID;
  input  [31 : 0] AXI4_AWADDR;
  input  [7 : 0] AXI4_AWLEN;
  input  [2 : 0] AXI4_AWSIZE;
  input  [1 : 0] AXI4_AWBURST;
  input  AXI4_AWLOCK;
  input  [3 : 0] AXI4_AWCACHE;
  input  [2 : 0] AXI4_AWPROT;
  input  [3 : 0] AXI4_AWQOS;
  input  [3 : 0] AXI4_AWREGION;

  // value method axi4_side_m_awready
  output AXI4_AWREADY;

  // action method axi4_side_m_wvalid
  input  AXI4_WVALID;
  input  [31 : 0] AXI4_WDATA;
  input  [3 : 0] AXI4_WSTRB;
  input  AXI4_WLAST;

  // value method axi4_side_m_wready
  output AXI4_WREADY;

  // value method axi4_side_m_bvalid
  output AXI4_BVALID;

  // value method axi4_side_m_bid

  // value method axi4_side_m_bresp
  output [1 : 0] AXI4_BRESP;

  // value method axi4_side_m_buser

  // action method axi4_side_m_bready
  input  AXI4_BREADY;

  // action method axi4_side_m_arvalid
  input  AXI4_ARVALID;
  input  [31 : 0] AXI4_ARADDR;
  input  [7 : 0] AXI4_ARLEN;
  input  [2 : 0] AXI4_ARSIZE;
  input  [1 : 0] AXI4_ARBURST;
  input  AXI4_ARLOCK;
  input  [3 : 0] AXI4_ARCACHE;
  input  [2 : 0] AXI4_ARPROT;
  input  [3 : 0] AXI4_ARQOS;
  input  [3 : 0] AXI4_ARREGION;

  // value method axi4_side_m_arready
  output AXI4_ARREADY;

  // value method axi4_side_m_rvalid
  output AXI4_RVALID;

  // value method axi4_side_m_rid

  // value method axi4_side_m_rdata
  output [31 : 0] AXI4_RDATA;

  // value method axi4_side_m_rresp
  output [1 : 0] AXI4_RRESP;

  // value method axi4_side_m_rlast
  output AXI4_RLAST;

  // value method axi4_side_m_ruser

  // action method axi4_side_m_rready
  input  AXI4_RREADY;

  // value method axi4l_side_m_awvalid
  output AXI4L_AWVALID;

  // value method axi4l_side_m_awaddr
  output [31 : 0] AXI4L_AWADDR;

  // value method axi4l_side_m_awprot
  output [2 : 0] AXI4L_AWPROT;

  // value method axi4l_side_m_awuser

  // action method axi4l_side_m_awready
  input  AXI4L_AWREADY;

  // value method axi4l_side_m_wvalid
  output AXI4L_WVALID;

  // value method axi4l_side_m_wdata
  output [31 : 0] AXI4L_WDATA;

  // value method axi4l_side_m_wstrb
  output [3 : 0] AXI4L_WSTRB;

  // action method axi4l_side_m_wready
  input  AXI4L_WREADY;

  // action method axi4l_side_m_bvalid
  input  AXI4L_BVALID;
  input  [1 : 0] AXI4L_BRESP;

  // value method axi4l_side_m_bready
  output AXI4L_BREADY;

  // value method axi4l_side_m_arvalid
  output AXI4L_ARVALID;

  // value method axi4l_side_m_araddr
  output [31 : 0] AXI4L_ARADDR;

  // value method axi4l_side_m_arprot
  output [2 : 0] AXI4L_ARPROT;

  // value method axi4l_side_m_aruser

  // action method axi4l_side_m_arready
  input  AXI4L_ARREADY;

  // action method axi4l_side_m_rvalid
  input  AXI4L_RVALID;
  input  [1 : 0] AXI4L_RRESP;
  input  [31 : 0] AXI4L_RDATA;

  // value method axi4l_side_m_rready
  output AXI4L_RREADY;

  // signals for module outputs
  wire [31 : 0] AXI4L_ARADDR, AXI4L_AWADDR, AXI4L_WDATA, AXI4_RDATA;
  wire [3 : 0] AXI4L_WSTRB;
  wire [2 : 0] AXI4L_ARPROT, AXI4L_AWPROT;
  wire [1 : 0] AXI4_BRESP, AXI4_RRESP;
  wire AXI4L_ARVALID,
       AXI4L_AWVALID,
       AXI4L_BREADY,
       AXI4L_RREADY,
       AXI4L_WVALID,
       AXI4_ARREADY,
       AXI4_AWREADY,
       AXI4_BVALID,
       AXI4_RLAST,
       AXI4_RVALID,
       AXI4_WREADY;

  // register rg_accum_data
  reg [31 : 0] rg_accum_data;
  wire [31 : 0] rg_accum_data_D_IN;
  wire rg_accum_data_EN;

  // register rg_accum_err
  reg [1 : 0] rg_accum_err;
  wire [1 : 0] rg_accum_err_D_IN;
  wire rg_accum_err_EN;

  // register rg_accum_mask
  reg [3 : 0] rg_accum_mask;
  wire [3 : 0] rg_accum_mask_D_IN;
  wire rg_accum_mask_EN;

  // register rg_child_rd_burst
  reg [7 : 0] rg_child_rd_burst;
  wire [7 : 0] rg_child_rd_burst_D_IN;
  wire rg_child_rd_burst_EN;

  // register rg_child_rd_req_count
  reg [7 : 0] rg_child_rd_req_count;
  wire [7 : 0] rg_child_rd_req_count_D_IN;
  wire rg_child_rd_req_count_EN;

  // register rg_child_rd_res_count
  reg [7 : 0] rg_child_rd_res_count;
  wire [7 : 0] rg_child_rd_res_count_D_IN;
  wire rg_child_rd_res_count_EN;

  // register rg_child_wr_burst
  reg [7 : 0] rg_child_wr_burst;
  wire [7 : 0] rg_child_wr_burst_D_IN;
  wire rg_child_wr_burst_EN;

  // register rg_child_wr_req_count
  reg [7 : 0] rg_child_wr_req_count;
  wire [7 : 0] rg_child_wr_req_count_D_IN;
  wire rg_child_wr_req_count_EN;

  // register rg_child_wr_res_count
  reg [7 : 0] rg_child_wr_res_count;
  wire [7 : 0] rg_child_wr_res_count_D_IN;
  wire rg_child_wr_res_count_EN;

  // register rg_rd_req_beat
  reg [7 : 0] rg_rd_req_beat;
  wire [7 : 0] rg_rd_req_beat_D_IN;
  wire rg_rd_req_beat_EN;

  // register rg_rd_request
  reg [60 : 0] rg_rd_request;
  wire [60 : 0] rg_rd_request_D_IN;
  wire rg_rd_request_EN;

  // register rg_rd_resp_beat
  reg [7 : 0] rg_rd_resp_beat;
  wire [7 : 0] rg_rd_resp_beat_D_IN;
  wire rg_rd_resp_beat_EN;

  // register rg_rd_state
  reg rg_rd_state;
  wire rg_rd_state_D_IN, rg_rd_state_EN;

  // register rg_wd_request
  reg [36 : 0] rg_wd_request;
  wire [36 : 0] rg_wd_request_D_IN;
  wire rg_wd_request_EN;

  // register rg_wr_req_beat
  reg [7 : 0] rg_wr_req_beat;
  wire [7 : 0] rg_wr_req_beat_D_IN;
  wire rg_wr_req_beat_EN;

  // register rg_wr_request
  reg [60 : 0] rg_wr_request;
  wire [60 : 0] rg_wr_request_D_IN;
  wire rg_wr_request_EN;

  // register rg_wr_resp_beat
  reg [7 : 0] rg_wr_resp_beat;
  wire [7 : 0] rg_wr_resp_beat_D_IN;
  wire rg_wr_resp_beat_EN;

  // register rg_wr_state
  reg rg_wr_state;
  wire rg_wr_state_D_IN, rg_wr_state_EN;

  // ports of submodule axi_xactor_f_arfifo
  wire [60 : 0] axi_xactor_f_arfifo_D_IN, axi_xactor_f_arfifo_D_OUT;
  wire axi_xactor_f_arfifo_CLR,
       axi_xactor_f_arfifo_DEQ,
       axi_xactor_f_arfifo_EMPTY_N,
       axi_xactor_f_arfifo_ENQ,
       axi_xactor_f_arfifo_FULL_N;

  // ports of submodule axi_xactor_f_awfifo
  wire [60 : 0] axi_xactor_f_awfifo_D_IN, axi_xactor_f_awfifo_D_OUT;
  wire axi_xactor_f_awfifo_CLR,
       axi_xactor_f_awfifo_DEQ,
       axi_xactor_f_awfifo_EMPTY_N,
       axi_xactor_f_awfifo_ENQ,
       axi_xactor_f_awfifo_FULL_N;

  // ports of submodule axi_xactor_f_bfifo
  wire [1 : 0] axi_xactor_f_bfifo_D_IN, axi_xactor_f_bfifo_D_OUT;
  wire axi_xactor_f_bfifo_CLR,
       axi_xactor_f_bfifo_DEQ,
       axi_xactor_f_bfifo_EMPTY_N,
       axi_xactor_f_bfifo_ENQ,
       axi_xactor_f_bfifo_FULL_N;

  // ports of submodule axi_xactor_f_rfifo
  wire [34 : 0] axi_xactor_f_rfifo_D_IN, axi_xactor_f_rfifo_D_OUT;
  wire axi_xactor_f_rfifo_CLR,
       axi_xactor_f_rfifo_DEQ,
       axi_xactor_f_rfifo_EMPTY_N,
       axi_xactor_f_rfifo_ENQ,
       axi_xactor_f_rfifo_FULL_N;

  // ports of submodule axi_xactor_f_wfifo
  wire [36 : 0] axi_xactor_f_wfifo_D_IN, axi_xactor_f_wfifo_D_OUT;
  wire axi_xactor_f_wfifo_CLR,
       axi_xactor_f_wfifo_DEQ,
       axi_xactor_f_wfifo_EMPTY_N,
       axi_xactor_f_wfifo_ENQ,
       axi_xactor_f_wfifo_FULL_N;

  // ports of submodule axil_xactor_f_rd_addr
  wire [34 : 0] axil_xactor_f_rd_addr_D_IN, axil_xactor_f_rd_addr_D_OUT;
  wire axil_xactor_f_rd_addr_CLR,
       axil_xactor_f_rd_addr_DEQ,
       axil_xactor_f_rd_addr_EMPTY_N,
       axil_xactor_f_rd_addr_ENQ,
       axil_xactor_f_rd_addr_FULL_N;

  // ports of submodule axil_xactor_f_rd_data
  wire [33 : 0] axil_xactor_f_rd_data_D_IN, axil_xactor_f_rd_data_D_OUT;
  wire axil_xactor_f_rd_data_CLR,
       axil_xactor_f_rd_data_DEQ,
       axil_xactor_f_rd_data_EMPTY_N,
       axil_xactor_f_rd_data_ENQ,
       axil_xactor_f_rd_data_FULL_N;

  // ports of submodule axil_xactor_f_wr_addr
  wire [34 : 0] axil_xactor_f_wr_addr_D_IN, axil_xactor_f_wr_addr_D_OUT;
  wire axil_xactor_f_wr_addr_CLR,
       axil_xactor_f_wr_addr_DEQ,
       axil_xactor_f_wr_addr_EMPTY_N,
       axil_xactor_f_wr_addr_ENQ,
       axil_xactor_f_wr_addr_FULL_N;

  // ports of submodule axil_xactor_f_wr_data
  wire [35 : 0] axil_xactor_f_wr_data_D_IN, axil_xactor_f_wr_data_D_OUT;
  wire axil_xactor_f_wr_data_CLR,
       axil_xactor_f_wr_data_DEQ,
       axil_xactor_f_wr_data_EMPTY_N,
       axil_xactor_f_wr_data_ENQ,
       axil_xactor_f_wr_data_FULL_N;

  // ports of submodule axil_xactor_f_wr_resp
  wire [1 : 0] axil_xactor_f_wr_resp_D_IN, axil_xactor_f_wr_resp_D_OUT;
  wire axil_xactor_f_wr_resp_CLR,
       axil_xactor_f_wr_resp_DEQ,
       axil_xactor_f_wr_resp_EMPTY_N,
       axil_xactor_f_wr_resp_ENQ,
       axil_xactor_f_wr_resp_FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_rl_read_frm_axi,
       CAN_FIRE_RL_rl_read_response_to_axi,
       CAN_FIRE_RL_rl_send_rd_burst_req,
       CAN_FIRE_RL_rl_send_wr_burst_req,
       CAN_FIRE_RL_rl_write_frm_axi,
       CAN_FIRE_RL_rl_write_response_to_axi,
       CAN_FIRE_axi4_side_m_arvalid,
       CAN_FIRE_axi4_side_m_awvalid,
       CAN_FIRE_axi4_side_m_bready,
       CAN_FIRE_axi4_side_m_rready,
       CAN_FIRE_axi4_side_m_wvalid,
       CAN_FIRE_axi4l_side_m_arready,
       CAN_FIRE_axi4l_side_m_awready,
       CAN_FIRE_axi4l_side_m_bvalid,
       CAN_FIRE_axi4l_side_m_rvalid,
       CAN_FIRE_axi4l_side_m_wready,
       WILL_FIRE_RL_rl_read_frm_axi,
       WILL_FIRE_RL_rl_read_response_to_axi,
       WILL_FIRE_RL_rl_send_rd_burst_req,
       WILL_FIRE_RL_rl_send_wr_burst_req,
       WILL_FIRE_RL_rl_write_frm_axi,
       WILL_FIRE_RL_rl_write_response_to_axi,
       WILL_FIRE_axi4_side_m_arvalid,
       WILL_FIRE_axi4_side_m_awvalid,
       WILL_FIRE_axi4_side_m_bready,
       WILL_FIRE_axi4_side_m_rready,
       WILL_FIRE_axi4_side_m_wvalid,
       WILL_FIRE_axi4l_side_m_arready,
       WILL_FIRE_axi4l_side_m_awready,
       WILL_FIRE_axi4l_side_m_bvalid,
       WILL_FIRE_axi4l_side_m_rvalid,
       WILL_FIRE_axi4l_side_m_wready;

  // inputs to muxes for submodule ports
  reg [1 : 0] MUX_rg_accum_err_write_1__VAL_1;
  wire [60 : 0] MUX_rg_rd_request_write_1__VAL_2,
		MUX_rg_wr_request_write_1__VAL_2;
  wire [34 : 0] MUX_axil_xactor_f_rd_addr_enq_1__VAL_1,
		MUX_axil_xactor_f_rd_addr_enq_1__VAL_2,
		MUX_axil_xactor_f_wr_addr_enq_1__VAL_1,
		MUX_axil_xactor_f_wr_addr_enq_1__VAL_2;
  wire [7 : 0] MUX_rg_rd_req_beat_write_1__VAL_1,
	       MUX_rg_rd_resp_beat_write_1__VAL_1,
	       MUX_rg_rd_resp_beat_write_1__VAL_2,
	       MUX_rg_wr_req_beat_write_1__VAL_1,
	       MUX_rg_wr_resp_beat_write_1__VAL_1,
	       MUX_rg_wr_resp_beat_write_1__VAL_2;
  wire MUX_rg_rd_state_write_1__SEL_1, MUX_rg_wr_state_write_1__SEL_1;

  // declarations used by system tasks
  // synopsys translate_off
  reg TASK_testplusargs___d11;
  reg TASK_testplusargs___d12;
  reg TASK_testplusargs___d13;
  reg [63 : 0] v__h2130;
  reg TASK_testplusargs___d60;
  reg TASK_testplusargs___d61;
  reg TASK_testplusargs___d62;
  reg [63 : 0] v__h2335;
  reg TASK_testplusargs___d100;
  reg TASK_testplusargs___d101;
  reg TASK_testplusargs___d102;
  reg [63 : 0] v__h2921;
  reg TASK_testplusargs___d106;
  reg TASK_testplusargs___d107;
  reg TASK_testplusargs___d108;
  reg [63 : 0] v__h3068;
  reg TASK_testplusargs___d112;
  reg TASK_testplusargs___d113;
  reg TASK_testplusargs___d114;
  reg [63 : 0] v__h3209;
  reg TASK_testplusargs___d134;
  reg TASK_testplusargs___d135;
  reg TASK_testplusargs___d136;
  reg [63 : 0] v__h3664;
  reg TASK_testplusargs___d160;
  reg TASK_testplusargs___d161;
  reg TASK_testplusargs___d162;
  reg [63 : 0] v__h3949;
  reg TASK_testplusargs___d170;
  reg TASK_testplusargs___d171;
  reg TASK_testplusargs___d172;
  reg [63 : 0] v__h4113;
  reg TASK_testplusargs___d196;
  reg TASK_testplusargs___d197;
  reg TASK_testplusargs___d198;
  reg [63 : 0] v__h4714;
  reg TASK_testplusargs___d244;
  reg TASK_testplusargs___d245;
  reg TASK_testplusargs___d246;
  reg [63 : 0] v__h4917;
  reg TASK_testplusargs___d256;
  reg TASK_testplusargs___d257;
  reg TASK_testplusargs___d258;
  reg [63 : 0] v__h5075;
  reg TASK_testplusargs___d262;
  reg TASK_testplusargs___d263;
  reg TASK_testplusargs___d264;
  reg [63 : 0] v__h5216;
  reg TASK_testplusargs___d299;
  reg TASK_testplusargs___d300;
  reg TASK_testplusargs___d301;
  reg [63 : 0] v__h5659;
  reg TASK_testplusargs___d309;
  reg TASK_testplusargs___d310;
  reg TASK_testplusargs___d311;
  reg [63 : 0] v__h5879;
  reg TASK_testplusargs___d317;
  reg TASK_testplusargs___d318;
  reg TASK_testplusargs___d319;
  reg [63 : 0] v__h6037;
  reg TASK_testplusargs___d323;
  reg TASK_testplusargs___d324;
  reg TASK_testplusargs___d325;
  reg [63 : 0] v__h6178;
  reg TASK_testplusargs___d358;
  reg TASK_testplusargs___d359;
  reg TASK_testplusargs___d360;
  reg [63 : 0] v__h6584;
  reg TASK_testplusargs_1_OR_TASK_testplusargs_2_AND_ETC___d20;
  reg TASK_testplusargs_1_OR_TASK_testplusargs_2_AND_ETC___d22;
  reg TASK_testplusargs_1_OR_TASK_testplusargs_2_AND_ETC___d24;
  reg TASK_testplusargs_1_OR_TASK_testplusargs_2_AND_ETC___d26;
  reg TASK_testplusargs_1_OR_TASK_testplusargs_2_AND_ETC___d28;
  reg TASK_testplusargs_1_OR_TASK_testplusargs_2_AND_ETC___d30;
  reg TASK_testplusargs_1_OR_TASK_testplusargs_2_AND_ETC___d32;
  reg TASK_testplusargs_1_OR_TASK_testplusargs_2_AND_ETC___d46;
  reg TASK_testplusargs_1_OR_TASK_testplusargs_2_AND_ETC___d49;
  reg TASK_testplusargs_1_OR_TASK_testplusargs_2_AND_ETC___d51;
  reg TASK_testplusargs_1_OR_TASK_testplusargs_2_AND_ETC___d53;
  reg TASK_testplusargs_1_OR_TASK_testplusargs_2_AND_ETC___d59;
  reg TASK_testplusargs_34_OR_TASK_testplusargs_35_A_ETC___d141;
  reg TASK_testplusargs_34_OR_TASK_testplusargs_35_A_ETC___d143;
  reg TASK_testplusargs_34_OR_TASK_testplusargs_35_A_ETC___d145;
  reg TASK_testplusargs_34_OR_TASK_testplusargs_35_A_ETC___d151;
  reg TASK_testplusargs_34_OR_TASK_testplusargs_35_A_ETC___d152;
  reg TASK_testplusargs_34_OR_TASK_testplusargs_35_A_ETC___d154;
  reg TASK_testplusargs_60_OR_TASK_testplusargs_61_A_ETC___d166;
  reg TASK_testplusargs_60_OR_TASK_testplusargs_61_A_ETC___d167;
  reg TASK_testplusargs_60_OR_TASK_testplusargs_61_A_ETC___d168;
  reg TASK_testplusargs_60_OR_TASK_testplusargs_61_A_ETC___d169;
  reg TASK_testplusargs_96_OR_TASK_testplusargs_97_A_ETC___d204;
  reg TASK_testplusargs_96_OR_TASK_testplusargs_97_A_ETC___d206;
  reg TASK_testplusargs_96_OR_TASK_testplusargs_97_A_ETC___d208;
  reg TASK_testplusargs_96_OR_TASK_testplusargs_97_A_ETC___d210;
  reg TASK_testplusargs_96_OR_TASK_testplusargs_97_A_ETC___d212;
  reg TASK_testplusargs_96_OR_TASK_testplusargs_97_A_ETC___d214;
  reg TASK_testplusargs_96_OR_TASK_testplusargs_97_A_ETC___d216;
  reg TASK_testplusargs_96_OR_TASK_testplusargs_97_A_ETC___d230;
  reg TASK_testplusargs_96_OR_TASK_testplusargs_97_A_ETC___d233;
  reg TASK_testplusargs_96_OR_TASK_testplusargs_97_A_ETC___d235;
  reg TASK_testplusargs_96_OR_TASK_testplusargs_97_A_ETC___d237;
  reg TASK_testplusargs_96_OR_TASK_testplusargs_97_A_ETC___d243;
  reg TASK_testplusargs_44_OR_TASK_testplusargs_45_A_ETC___d253;
  reg TASK_testplusargs_44_OR_TASK_testplusargs_45_A_ETC___d255;
  reg TASK_testplusargs_99_OR_TASK_testplusargs_00_A_ETC___d305;
  reg TASK_testplusargs_99_OR_TASK_testplusargs_00_A_ETC___d306;
  reg TASK_testplusargs_09_OR_TASK_testplusargs_10_A_ETC___d315;
  reg TASK_testplusargs_09_OR_TASK_testplusargs_10_A_ETC___d316;
  reg TASK_testplusargs_58_OR_TASK_testplusargs_59_A_ETC___d365;
  reg TASK_testplusargs_58_OR_TASK_testplusargs_59_A_ETC___d367;
  reg TASK_testplusargs_58_OR_TASK_testplusargs_59_A_ETC___d368;
  reg TASK_testplusargs_58_OR_TASK_testplusargs_59_A_ETC___d374;
  // synopsys translate_on

  // remaining internal signals
  reg [31 : 0] axil_req_awaddr__h5777, axil_request_araddr__h2845;
  reg [2 : 0] CASE_rg_rd_request_BITS_28_TO_21_3_2_7_3_15_4_1__q1,
	      CASE_rg_wr_request_BITS_28_TO_21_3_2_7_3_15_4_1__q2;
  wire [31 : 0] mask__h2624,
		mask__h5363,
		new_address__h2622,
		new_address__h5361,
		temp1__h2625,
		temp1__h5364,
		temp2__h2626,
		temp2__h5365,
		y__h2726,
		y__h5465;
  wire [2 : 0] x__h2667, x__h5406;

  // action method axi4_side_m_awvalid
  assign CAN_FIRE_axi4_side_m_awvalid = 1'd1 ;
  assign WILL_FIRE_axi4_side_m_awvalid = 1'd1 ;

  // value method axi4_side_m_awready
  assign AXI4_AWREADY = axi_xactor_f_awfifo_FULL_N ;

  // action method axi4_side_m_wvalid
  assign CAN_FIRE_axi4_side_m_wvalid = 1'd1 ;
  assign WILL_FIRE_axi4_side_m_wvalid = 1'd1 ;

  // value method axi4_side_m_wready
  assign AXI4_WREADY = axi_xactor_f_wfifo_FULL_N ;

  // value method axi4_side_m_bvalid
  assign AXI4_BVALID = axi_xactor_f_bfifo_EMPTY_N ;

  // value method axi4_side_m_bresp
  assign AXI4_BRESP = axi_xactor_f_bfifo_D_OUT ;

  // action method axi4_side_m_bready
  assign CAN_FIRE_axi4_side_m_bready = 1'd1 ;
  assign WILL_FIRE_axi4_side_m_bready = 1'd1 ;

  // action method axi4_side_m_arvalid
  assign CAN_FIRE_axi4_side_m_arvalid = 1'd1 ;
  assign WILL_FIRE_axi4_side_m_arvalid = 1'd1 ;

  // value method axi4_side_m_arready
  assign AXI4_ARREADY = axi_xactor_f_arfifo_FULL_N ;

  // value method axi4_side_m_rvalid
  assign AXI4_RVALID = axi_xactor_f_rfifo_EMPTY_N ;

  // value method axi4_side_m_rdata
  assign AXI4_RDATA = axi_xactor_f_rfifo_D_OUT[34:3] ;

  // value method axi4_side_m_rresp
  assign AXI4_RRESP = axi_xactor_f_rfifo_D_OUT[2:1] ;

  // value method axi4_side_m_rlast
  assign AXI4_RLAST = axi_xactor_f_rfifo_D_OUT[0] ;

  // action method axi4_side_m_rready
  assign CAN_FIRE_axi4_side_m_rready = 1'd1 ;
  assign WILL_FIRE_axi4_side_m_rready = 1'd1 ;

  // value method axi4l_side_m_awvalid
  assign AXI4L_AWVALID = axil_xactor_f_wr_addr_EMPTY_N ;

  // value method axi4l_side_m_awaddr
  assign AXI4L_AWADDR = axil_xactor_f_wr_addr_D_OUT[34:3] ;

  // value method axi4l_side_m_awprot
  assign AXI4L_AWPROT = axil_xactor_f_wr_addr_D_OUT[2:0] ;

  // action method axi4l_side_m_awready
  assign CAN_FIRE_axi4l_side_m_awready = 1'd1 ;
  assign WILL_FIRE_axi4l_side_m_awready = 1'd1 ;

  // value method axi4l_side_m_wvalid
  assign AXI4L_WVALID = axil_xactor_f_wr_data_EMPTY_N ;

  // value method axi4l_side_m_wdata
  assign AXI4L_WDATA = axil_xactor_f_wr_data_D_OUT[35:4] ;

  // value method axi4l_side_m_wstrb
  assign AXI4L_WSTRB = axil_xactor_f_wr_data_D_OUT[3:0] ;

  // action method axi4l_side_m_wready
  assign CAN_FIRE_axi4l_side_m_wready = 1'd1 ;
  assign WILL_FIRE_axi4l_side_m_wready = 1'd1 ;

  // action method axi4l_side_m_bvalid
  assign CAN_FIRE_axi4l_side_m_bvalid = 1'd1 ;
  assign WILL_FIRE_axi4l_side_m_bvalid = 1'd1 ;

  // value method axi4l_side_m_bready
  assign AXI4L_BREADY = axil_xactor_f_wr_resp_FULL_N ;

  // value method axi4l_side_m_arvalid
  assign AXI4L_ARVALID = axil_xactor_f_rd_addr_EMPTY_N ;

  // value method axi4l_side_m_araddr
  assign AXI4L_ARADDR = axil_xactor_f_rd_addr_D_OUT[34:3] ;

  // value method axi4l_side_m_arprot
  assign AXI4L_ARPROT = axil_xactor_f_rd_addr_D_OUT[2:0] ;

  // action method axi4l_side_m_arready
  assign CAN_FIRE_axi4l_side_m_arready = 1'd1 ;
  assign WILL_FIRE_axi4l_side_m_arready = 1'd1 ;

  // action method axi4l_side_m_rvalid
  assign CAN_FIRE_axi4l_side_m_rvalid = 1'd1 ;
  assign WILL_FIRE_axi4l_side_m_rvalid = 1'd1 ;

  // value method axi4l_side_m_rready
  assign AXI4L_RREADY = axil_xactor_f_rd_data_FULL_N ;

  // submodule axi_xactor_f_arfifo
  FIFO2 #(.width(32'd61), .guarded(1'd1)) axi_xactor_f_arfifo(.RST(RST_N),
							      .CLK(CLK),
							      .D_IN(axi_xactor_f_arfifo_D_IN),
							      .ENQ(axi_xactor_f_arfifo_ENQ),
							      .DEQ(axi_xactor_f_arfifo_DEQ),
							      .CLR(axi_xactor_f_arfifo_CLR),
							      .D_OUT(axi_xactor_f_arfifo_D_OUT),
							      .FULL_N(axi_xactor_f_arfifo_FULL_N),
							      .EMPTY_N(axi_xactor_f_arfifo_EMPTY_N));

  // submodule axi_xactor_f_awfifo
  FIFO2 #(.width(32'd61), .guarded(1'd1)) axi_xactor_f_awfifo(.RST(RST_N),
							      .CLK(CLK),
							      .D_IN(axi_xactor_f_awfifo_D_IN),
							      .ENQ(axi_xactor_f_awfifo_ENQ),
							      .DEQ(axi_xactor_f_awfifo_DEQ),
							      .CLR(axi_xactor_f_awfifo_CLR),
							      .D_OUT(axi_xactor_f_awfifo_D_OUT),
							      .FULL_N(axi_xactor_f_awfifo_FULL_N),
							      .EMPTY_N(axi_xactor_f_awfifo_EMPTY_N));

  // submodule axi_xactor_f_bfifo
  FIFO2 #(.width(32'd2), .guarded(1'd1)) axi_xactor_f_bfifo(.RST(RST_N),
							    .CLK(CLK),
							    .D_IN(axi_xactor_f_bfifo_D_IN),
							    .ENQ(axi_xactor_f_bfifo_ENQ),
							    .DEQ(axi_xactor_f_bfifo_DEQ),
							    .CLR(axi_xactor_f_bfifo_CLR),
							    .D_OUT(axi_xactor_f_bfifo_D_OUT),
							    .FULL_N(axi_xactor_f_bfifo_FULL_N),
							    .EMPTY_N(axi_xactor_f_bfifo_EMPTY_N));

  // submodule axi_xactor_f_rfifo
  FIFO2 #(.width(32'd35), .guarded(1'd1)) axi_xactor_f_rfifo(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(axi_xactor_f_rfifo_D_IN),
							     .ENQ(axi_xactor_f_rfifo_ENQ),
							     .DEQ(axi_xactor_f_rfifo_DEQ),
							     .CLR(axi_xactor_f_rfifo_CLR),
							     .D_OUT(axi_xactor_f_rfifo_D_OUT),
							     .FULL_N(axi_xactor_f_rfifo_FULL_N),
							     .EMPTY_N(axi_xactor_f_rfifo_EMPTY_N));

  // submodule axi_xactor_f_wfifo
  FIFO2 #(.width(32'd37), .guarded(1'd1)) axi_xactor_f_wfifo(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(axi_xactor_f_wfifo_D_IN),
							     .ENQ(axi_xactor_f_wfifo_ENQ),
							     .DEQ(axi_xactor_f_wfifo_DEQ),
							     .CLR(axi_xactor_f_wfifo_CLR),
							     .D_OUT(axi_xactor_f_wfifo_D_OUT),
							     .FULL_N(axi_xactor_f_wfifo_FULL_N),
							     .EMPTY_N(axi_xactor_f_wfifo_EMPTY_N));

  // submodule axil_xactor_f_rd_addr
  FIFO2 #(.width(32'd35), .guarded(1'd1)) axil_xactor_f_rd_addr(.RST(RST_N),
								.CLK(CLK),
								.D_IN(axil_xactor_f_rd_addr_D_IN),
								.ENQ(axil_xactor_f_rd_addr_ENQ),
								.DEQ(axil_xactor_f_rd_addr_DEQ),
								.CLR(axil_xactor_f_rd_addr_CLR),
								.D_OUT(axil_xactor_f_rd_addr_D_OUT),
								.FULL_N(axil_xactor_f_rd_addr_FULL_N),
								.EMPTY_N(axil_xactor_f_rd_addr_EMPTY_N));

  // submodule axil_xactor_f_rd_data
  FIFO2 #(.width(32'd34), .guarded(1'd1)) axil_xactor_f_rd_data(.RST(RST_N),
								.CLK(CLK),
								.D_IN(axil_xactor_f_rd_data_D_IN),
								.ENQ(axil_xactor_f_rd_data_ENQ),
								.DEQ(axil_xactor_f_rd_data_DEQ),
								.CLR(axil_xactor_f_rd_data_CLR),
								.D_OUT(axil_xactor_f_rd_data_D_OUT),
								.FULL_N(axil_xactor_f_rd_data_FULL_N),
								.EMPTY_N(axil_xactor_f_rd_data_EMPTY_N));

  // submodule axil_xactor_f_wr_addr
  FIFO2 #(.width(32'd35), .guarded(1'd1)) axil_xactor_f_wr_addr(.RST(RST_N),
								.CLK(CLK),
								.D_IN(axil_xactor_f_wr_addr_D_IN),
								.ENQ(axil_xactor_f_wr_addr_ENQ),
								.DEQ(axil_xactor_f_wr_addr_DEQ),
								.CLR(axil_xactor_f_wr_addr_CLR),
								.D_OUT(axil_xactor_f_wr_addr_D_OUT),
								.FULL_N(axil_xactor_f_wr_addr_FULL_N),
								.EMPTY_N(axil_xactor_f_wr_addr_EMPTY_N));

  // submodule axil_xactor_f_wr_data
  FIFO2 #(.width(32'd36), .guarded(1'd1)) axil_xactor_f_wr_data(.RST(RST_N),
								.CLK(CLK),
								.D_IN(axil_xactor_f_wr_data_D_IN),
								.ENQ(axil_xactor_f_wr_data_ENQ),
								.DEQ(axil_xactor_f_wr_data_DEQ),
								.CLR(axil_xactor_f_wr_data_CLR),
								.D_OUT(axil_xactor_f_wr_data_D_OUT),
								.FULL_N(axil_xactor_f_wr_data_FULL_N),
								.EMPTY_N(axil_xactor_f_wr_data_EMPTY_N));

  // submodule axil_xactor_f_wr_resp
  FIFO2 #(.width(32'd2), .guarded(1'd1)) axil_xactor_f_wr_resp(.RST(RST_N),
							       .CLK(CLK),
							       .D_IN(axil_xactor_f_wr_resp_D_IN),
							       .ENQ(axil_xactor_f_wr_resp_ENQ),
							       .DEQ(axil_xactor_f_wr_resp_DEQ),
							       .CLR(axil_xactor_f_wr_resp_CLR),
							       .D_OUT(axil_xactor_f_wr_resp_D_OUT),
							       .FULL_N(axil_xactor_f_wr_resp_FULL_N),
							       .EMPTY_N(axil_xactor_f_wr_resp_EMPTY_N));

  // rule RL_rl_read_frm_axi
  assign CAN_FIRE_RL_rl_read_frm_axi =
	     axi_xactor_f_arfifo_EMPTY_N && axil_xactor_f_rd_addr_FULL_N &&
	     !rg_rd_state ;
  assign WILL_FIRE_RL_rl_read_frm_axi = CAN_FIRE_RL_rl_read_frm_axi ;

  // rule RL_rl_send_rd_burst_req
  assign CAN_FIRE_RL_rl_send_rd_burst_req =
	     axil_xactor_f_rd_addr_FULL_N && rg_rd_state &&
	     rg_rd_req_beat != 8'd0 ;
  assign WILL_FIRE_RL_rl_send_rd_burst_req =
	     CAN_FIRE_RL_rl_send_rd_burst_req ;

  // rule RL_rl_read_response_to_axi
  assign CAN_FIRE_RL_rl_read_response_to_axi =
	     axil_xactor_f_rd_data_EMPTY_N && axi_xactor_f_rfifo_FULL_N &&
	     rg_rd_state &&
	     rg_rd_resp_beat != 8'd0 ;
  assign WILL_FIRE_RL_rl_read_response_to_axi =
	     CAN_FIRE_RL_rl_read_response_to_axi ;

  // rule RL_rl_write_frm_axi
  assign CAN_FIRE_RL_rl_write_frm_axi =
	     axi_xactor_f_awfifo_EMPTY_N && axil_xactor_f_wr_addr_FULL_N &&
	     axil_xactor_f_wr_data_FULL_N &&
	     axi_xactor_f_wfifo_EMPTY_N &&
	     !rg_wr_state ;
  assign WILL_FIRE_RL_rl_write_frm_axi = CAN_FIRE_RL_rl_write_frm_axi ;

  // rule RL_rl_send_wr_burst_req
  assign CAN_FIRE_RL_rl_send_wr_burst_req =
	     axil_xactor_f_wr_addr_FULL_N && axil_xactor_f_wr_data_FULL_N &&
	     axi_xactor_f_wfifo_EMPTY_N &&
	     rg_wr_state &&
	     rg_wr_req_beat != 8'd0 ;
  assign WILL_FIRE_RL_rl_send_wr_burst_req =
	     CAN_FIRE_RL_rl_send_wr_burst_req ;

  // rule RL_rl_write_response_to_axi
  assign CAN_FIRE_RL_rl_write_response_to_axi =
	     axil_xactor_f_wr_resp_EMPTY_N && axi_xactor_f_bfifo_FULL_N &&
	     rg_wr_state &&
	     rg_wr_resp_beat != 8'd0 ;
  assign WILL_FIRE_RL_rl_write_response_to_axi =
	     CAN_FIRE_RL_rl_write_response_to_axi ;

  // inputs to muxes for submodule ports
  assign MUX_rg_rd_state_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_read_response_to_axi &&
	     rg_rd_resp_beat == 8'd1 &&
	     (rg_child_rd_res_count == rg_child_rd_burst ||
	      rg_child_rd_burst == 8'd0) ;
  assign MUX_rg_wr_state_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_write_response_to_axi &&
	     rg_wr_resp_beat == 8'd1 &&
	     (rg_child_wr_res_count == rg_child_wr_burst ||
	      rg_child_wr_burst == 8'd0) ;
  assign MUX_axil_xactor_f_rd_addr_enq_1__VAL_1 =
	     { axi_xactor_f_arfifo_D_OUT[60:29],
	       axi_xactor_f_arfifo_D_OUT[10:8] } ;
  assign MUX_axil_xactor_f_rd_addr_enq_1__VAL_2 =
	     { axil_request_araddr__h2845, rg_rd_request[10:8] } ;
  assign MUX_axil_xactor_f_wr_addr_enq_1__VAL_1 =
	     { axi_xactor_f_awfifo_D_OUT[60:29],
	       axi_xactor_f_awfifo_D_OUT[10:8] } ;
  assign MUX_axil_xactor_f_wr_addr_enq_1__VAL_2 =
	     { axil_req_awaddr__h5777, rg_wr_request[10:8] } ;
  always@(rg_accum_err or axil_xactor_f_wr_resp_D_OUT)
  begin
    case (rg_accum_err)
      2'b0, 2'b01:
	  MUX_rg_accum_err_write_1__VAL_1 = axil_xactor_f_wr_resp_D_OUT;
      2'b10: MUX_rg_accum_err_write_1__VAL_1 = rg_accum_err;
      2'b11:
	  MUX_rg_accum_err_write_1__VAL_1 =
	      (axil_xactor_f_wr_resp_D_OUT == 2'b10) ?
		axil_xactor_f_wr_resp_D_OUT :
		2'b11;
    endcase
  end
  assign MUX_rg_rd_req_beat_write_1__VAL_1 = rg_rd_req_beat - 8'd1 ;
  assign MUX_rg_rd_request_write_1__VAL_2 =
	     { axil_request_araddr__h2845, rg_rd_request[28:0] } ;
  assign MUX_rg_rd_resp_beat_write_1__VAL_1 =
	     axi_xactor_f_arfifo_D_OUT[28:21] + 8'd1 ;
  assign MUX_rg_rd_resp_beat_write_1__VAL_2 = rg_rd_resp_beat - 8'd1 ;
  assign MUX_rg_wr_req_beat_write_1__VAL_1 = rg_wr_req_beat - 8'd1 ;
  assign MUX_rg_wr_request_write_1__VAL_2 =
	     { axil_req_awaddr__h5777, rg_wr_request[28:0] } ;
  assign MUX_rg_wr_resp_beat_write_1__VAL_1 =
	     axi_xactor_f_awfifo_D_OUT[28:21] + 8'd1 ;
  assign MUX_rg_wr_resp_beat_write_1__VAL_2 = rg_wr_resp_beat - 8'd1 ;

  // register rg_accum_data
  assign rg_accum_data_D_IN = 32'h0 ;
  assign rg_accum_data_EN = 1'b0 ;

  // register rg_accum_err
  assign rg_accum_err_D_IN =
	     WILL_FIRE_RL_rl_write_response_to_axi ?
	       MUX_rg_accum_err_write_1__VAL_1 :
	       2'b0 ;
  assign rg_accum_err_EN =
	     WILL_FIRE_RL_rl_write_response_to_axi ||
	     WILL_FIRE_RL_rl_write_frm_axi ;

  // register rg_accum_mask
  assign rg_accum_mask_D_IN = 4'd15 ;
  assign rg_accum_mask_EN = CAN_FIRE_RL_rl_read_frm_axi ;

  // register rg_child_rd_burst
  assign rg_child_rd_burst_D_IN = 8'h0 ;
  assign rg_child_rd_burst_EN = 1'b0 ;

  // register rg_child_rd_req_count
  assign rg_child_rd_req_count_D_IN = 8'h0 ;
  assign rg_child_rd_req_count_EN = 1'b0 ;

  // register rg_child_rd_res_count
  assign rg_child_rd_res_count_D_IN = 8'h0 ;
  assign rg_child_rd_res_count_EN = 1'b0 ;

  // register rg_child_wr_burst
  assign rg_child_wr_burst_D_IN = 8'h0 ;
  assign rg_child_wr_burst_EN = 1'b0 ;

  // register rg_child_wr_req_count
  assign rg_child_wr_req_count_D_IN = 8'h0 ;
  assign rg_child_wr_req_count_EN = 1'b0 ;

  // register rg_child_wr_res_count
  assign rg_child_wr_res_count_D_IN = 8'h0 ;
  assign rg_child_wr_res_count_EN = 1'b0 ;

  // register rg_rd_req_beat
  assign rg_rd_req_beat_D_IN =
	     WILL_FIRE_RL_rl_send_rd_burst_req ?
	       MUX_rg_rd_req_beat_write_1__VAL_1 :
	       axi_xactor_f_arfifo_D_OUT[28:21] ;
  assign rg_rd_req_beat_EN =
	     WILL_FIRE_RL_rl_send_rd_burst_req ||
	     WILL_FIRE_RL_rl_read_frm_axi ;

  // register rg_rd_request
  assign rg_rd_request_D_IN =
	     WILL_FIRE_RL_rl_read_frm_axi ?
	       axi_xactor_f_arfifo_D_OUT :
	       MUX_rg_rd_request_write_1__VAL_2 ;
  assign rg_rd_request_EN =
	     WILL_FIRE_RL_rl_read_frm_axi ||
	     WILL_FIRE_RL_rl_send_rd_burst_req ;

  // register rg_rd_resp_beat
  assign rg_rd_resp_beat_D_IN =
	     WILL_FIRE_RL_rl_read_frm_axi ?
	       MUX_rg_rd_resp_beat_write_1__VAL_1 :
	       MUX_rg_rd_resp_beat_write_1__VAL_2 ;
  assign rg_rd_resp_beat_EN =
	     WILL_FIRE_RL_rl_read_frm_axi ||
	     WILL_FIRE_RL_rl_read_response_to_axi ;

  // register rg_rd_state
  assign rg_rd_state_D_IN = !MUX_rg_rd_state_write_1__SEL_1 ;
  assign rg_rd_state_EN =
	     MUX_rg_rd_state_write_1__SEL_1 || WILL_FIRE_RL_rl_read_frm_axi ;

  // register rg_wd_request
  assign rg_wd_request_D_IN = axi_xactor_f_wfifo_D_OUT ;
  assign rg_wd_request_EN = CAN_FIRE_RL_rl_write_frm_axi ;

  // register rg_wr_req_beat
  assign rg_wr_req_beat_D_IN =
	     WILL_FIRE_RL_rl_send_wr_burst_req ?
	       MUX_rg_wr_req_beat_write_1__VAL_1 :
	       axi_xactor_f_awfifo_D_OUT[28:21] ;
  assign rg_wr_req_beat_EN =
	     WILL_FIRE_RL_rl_send_wr_burst_req ||
	     WILL_FIRE_RL_rl_write_frm_axi ;

  // register rg_wr_request
  assign rg_wr_request_D_IN =
	     WILL_FIRE_RL_rl_write_frm_axi ?
	       axi_xactor_f_awfifo_D_OUT :
	       MUX_rg_wr_request_write_1__VAL_2 ;
  assign rg_wr_request_EN =
	     WILL_FIRE_RL_rl_write_frm_axi ||
	     WILL_FIRE_RL_rl_send_wr_burst_req ;

  // register rg_wr_resp_beat
  assign rg_wr_resp_beat_D_IN =
	     WILL_FIRE_RL_rl_write_frm_axi ?
	       MUX_rg_wr_resp_beat_write_1__VAL_1 :
	       MUX_rg_wr_resp_beat_write_1__VAL_2 ;
  assign rg_wr_resp_beat_EN =
	     WILL_FIRE_RL_rl_write_frm_axi ||
	     WILL_FIRE_RL_rl_write_response_to_axi ;

  // register rg_wr_state
  assign rg_wr_state_D_IN = !MUX_rg_wr_state_write_1__SEL_1 ;
  assign rg_wr_state_EN =
	     MUX_rg_wr_state_write_1__SEL_1 || WILL_FIRE_RL_rl_write_frm_axi ;

  // submodule axi_xactor_f_arfifo
  assign axi_xactor_f_arfifo_D_IN =
	     { AXI4_ARADDR,
	       AXI4_ARLEN,
	       AXI4_ARSIZE,
	       AXI4_ARBURST,
	       AXI4_ARLOCK,
	       AXI4_ARCACHE,
	       AXI4_ARPROT,
	       AXI4_ARQOS,
	       AXI4_ARREGION } ;
  assign axi_xactor_f_arfifo_ENQ =
	     AXI4_ARVALID && axi_xactor_f_arfifo_FULL_N ;
  assign axi_xactor_f_arfifo_DEQ = CAN_FIRE_RL_rl_read_frm_axi ;
  assign axi_xactor_f_arfifo_CLR = 1'b0 ;

  // submodule axi_xactor_f_awfifo
  assign axi_xactor_f_awfifo_D_IN =
	     { AXI4_AWADDR,
	       AXI4_AWLEN,
	       AXI4_AWSIZE,
	       AXI4_AWBURST,
	       AXI4_AWLOCK,
	       AXI4_AWCACHE,
	       AXI4_AWPROT,
	       AXI4_AWQOS,
	       AXI4_AWREGION } ;
  assign axi_xactor_f_awfifo_ENQ =
	     AXI4_AWVALID && axi_xactor_f_awfifo_FULL_N ;
  assign axi_xactor_f_awfifo_DEQ = CAN_FIRE_RL_rl_write_frm_axi ;
  assign axi_xactor_f_awfifo_CLR = 1'b0 ;

  // submodule axi_xactor_f_bfifo
  assign axi_xactor_f_bfifo_D_IN = MUX_rg_accum_err_write_1__VAL_1 ;
  assign axi_xactor_f_bfifo_ENQ = MUX_rg_wr_state_write_1__SEL_1 ;
  assign axi_xactor_f_bfifo_DEQ = AXI4_BREADY && axi_xactor_f_bfifo_EMPTY_N ;
  assign axi_xactor_f_bfifo_CLR = 1'b0 ;

  // submodule axi_xactor_f_rfifo
  assign axi_xactor_f_rfifo_D_IN =
	     { axil_xactor_f_rd_data_D_OUT[31:0],
	       axil_xactor_f_rd_data_D_OUT[33:32],
	       rg_rd_resp_beat == 8'd1 } ;
  assign axi_xactor_f_rfifo_ENQ = CAN_FIRE_RL_rl_read_response_to_axi ;
  assign axi_xactor_f_rfifo_DEQ = AXI4_RREADY && axi_xactor_f_rfifo_EMPTY_N ;
  assign axi_xactor_f_rfifo_CLR = 1'b0 ;

  // submodule axi_xactor_f_wfifo
  assign axi_xactor_f_wfifo_D_IN = { AXI4_WDATA, AXI4_WSTRB, AXI4_WLAST } ;
  assign axi_xactor_f_wfifo_ENQ = AXI4_WVALID && axi_xactor_f_wfifo_FULL_N ;
  assign axi_xactor_f_wfifo_DEQ =
	     WILL_FIRE_RL_rl_send_wr_burst_req ||
	     WILL_FIRE_RL_rl_write_frm_axi ;
  assign axi_xactor_f_wfifo_CLR = 1'b0 ;

  // submodule axil_xactor_f_rd_addr
  assign axil_xactor_f_rd_addr_D_IN =
	     WILL_FIRE_RL_rl_read_frm_axi ?
	       MUX_axil_xactor_f_rd_addr_enq_1__VAL_1 :
	       MUX_axil_xactor_f_rd_addr_enq_1__VAL_2 ;
  assign axil_xactor_f_rd_addr_ENQ =
	     WILL_FIRE_RL_rl_read_frm_axi ||
	     WILL_FIRE_RL_rl_send_rd_burst_req ;
  assign axil_xactor_f_rd_addr_DEQ =
	     axil_xactor_f_rd_addr_EMPTY_N && AXI4L_ARREADY ;
  assign axil_xactor_f_rd_addr_CLR = 1'b0 ;

  // submodule axil_xactor_f_rd_data
  assign axil_xactor_f_rd_data_D_IN = { AXI4L_RRESP, AXI4L_RDATA } ;
  assign axil_xactor_f_rd_data_ENQ =
	     AXI4L_RVALID && axil_xactor_f_rd_data_FULL_N ;
  assign axil_xactor_f_rd_data_DEQ = CAN_FIRE_RL_rl_read_response_to_axi ;
  assign axil_xactor_f_rd_data_CLR = 1'b0 ;

  // submodule axil_xactor_f_wr_addr
  assign axil_xactor_f_wr_addr_D_IN =
	     WILL_FIRE_RL_rl_write_frm_axi ?
	       MUX_axil_xactor_f_wr_addr_enq_1__VAL_1 :
	       MUX_axil_xactor_f_wr_addr_enq_1__VAL_2 ;
  assign axil_xactor_f_wr_addr_ENQ =
	     WILL_FIRE_RL_rl_write_frm_axi ||
	     WILL_FIRE_RL_rl_send_wr_burst_req ;
  assign axil_xactor_f_wr_addr_DEQ =
	     axil_xactor_f_wr_addr_EMPTY_N && AXI4L_AWREADY ;
  assign axil_xactor_f_wr_addr_CLR = 1'b0 ;

  // submodule axil_xactor_f_wr_data
  assign axil_xactor_f_wr_data_D_IN = axi_xactor_f_wfifo_D_OUT[36:1] ;
  assign axil_xactor_f_wr_data_ENQ =
	     WILL_FIRE_RL_rl_send_wr_burst_req ||
	     WILL_FIRE_RL_rl_write_frm_axi ;
  assign axil_xactor_f_wr_data_DEQ =
	     axil_xactor_f_wr_data_EMPTY_N && AXI4L_WREADY ;
  assign axil_xactor_f_wr_data_CLR = 1'b0 ;

  // submodule axil_xactor_f_wr_resp
  assign axil_xactor_f_wr_resp_D_IN = AXI4L_BRESP ;
  assign axil_xactor_f_wr_resp_ENQ =
	     AXI4L_BVALID && axil_xactor_f_wr_resp_FULL_N ;
  assign axil_xactor_f_wr_resp_DEQ = CAN_FIRE_RL_rl_write_response_to_axi ;
  assign axil_xactor_f_wr_resp_CLR = 1'b0 ;

  // remaining internal signals
  assign mask__h2624 = 32'hFFFFFFFF << x__h2667 ;
  assign mask__h5363 = 32'hFFFFFFFF << x__h5406 ;
  assign new_address__h2622 =
	     rg_rd_request[60:29] +
	     (32'b00000000000000000000000000000001 << rg_rd_request[20:18]) ;
  assign new_address__h5361 =
	     rg_wr_request[60:29] +
	     (32'b00000000000000000000000000000001 << rg_wr_request[20:18]) ;
  assign temp1__h2625 = rg_rd_request[60:29] & mask__h2624 ;
  assign temp1__h5364 = rg_wr_request[60:29] & mask__h5363 ;
  assign temp2__h2626 = new_address__h2622 & y__h2726 ;
  assign temp2__h5365 = new_address__h5361 & y__h5465 ;
  assign x__h2667 =
	     rg_rd_request[20:18] +
	     CASE_rg_rd_request_BITS_28_TO_21_3_2_7_3_15_4_1__q1 ;
  assign x__h5406 =
	     rg_wr_request[20:18] +
	     CASE_rg_wr_request_BITS_28_TO_21_3_2_7_3_15_4_1__q2 ;
  assign y__h2726 = ~mask__h2624 ;
  assign y__h5465 = ~mask__h5363 ;
  always@(rg_rd_request)
  begin
    case (rg_rd_request[28:21])
      8'd3: CASE_rg_rd_request_BITS_28_TO_21_3_2_7_3_15_4_1__q1 = 3'd2;
      8'd7: CASE_rg_rd_request_BITS_28_TO_21_3_2_7_3_15_4_1__q1 = 3'd3;
      8'd15: CASE_rg_rd_request_BITS_28_TO_21_3_2_7_3_15_4_1__q1 = 3'd4;
      default: CASE_rg_rd_request_BITS_28_TO_21_3_2_7_3_15_4_1__q1 = 3'd1;
    endcase
  end
  always@(rg_wr_request)
  begin
    case (rg_wr_request[28:21])
      8'd3: CASE_rg_wr_request_BITS_28_TO_21_3_2_7_3_15_4_1__q2 = 3'd2;
      8'd7: CASE_rg_wr_request_BITS_28_TO_21_3_2_7_3_15_4_1__q2 = 3'd3;
      8'd15: CASE_rg_wr_request_BITS_28_TO_21_3_2_7_3_15_4_1__q2 = 3'd4;
      default: CASE_rg_wr_request_BITS_28_TO_21_3_2_7_3_15_4_1__q2 = 3'd1;
    endcase
  end
  always@(rg_rd_request or temp1__h2625 or temp2__h2626 or new_address__h2622)
  begin
    case (rg_rd_request[17:16])
      2'b0: axil_request_araddr__h2845 = rg_rd_request[60:29];
      2'b01: axil_request_araddr__h2845 = new_address__h2622;
      default: axil_request_araddr__h2845 = temp1__h2625 | temp2__h2626;
    endcase
  end
  always@(rg_wr_request or temp1__h5364 or temp2__h5365 or new_address__h5361)
  begin
    case (rg_wr_request[17:16])
      2'b0: axil_req_awaddr__h5777 = rg_wr_request[60:29];
      2'b01: axil_req_awaddr__h5777 = new_address__h5361;
      default: axil_req_awaddr__h5777 = temp1__h5364 | temp2__h5365;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        rg_accum_data <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rg_accum_err <= `BSV_ASSIGNMENT_DELAY 2'b0;
	rg_accum_mask <= `BSV_ASSIGNMENT_DELAY 4'd0;
	rg_child_rd_burst <= `BSV_ASSIGNMENT_DELAY 8'd0;
	rg_child_rd_req_count <= `BSV_ASSIGNMENT_DELAY 8'd0;
	rg_child_rd_res_count <= `BSV_ASSIGNMENT_DELAY 8'd0;
	rg_child_wr_burst <= `BSV_ASSIGNMENT_DELAY 8'd0;
	rg_child_wr_req_count <= `BSV_ASSIGNMENT_DELAY 8'd0;
	rg_child_wr_res_count <= `BSV_ASSIGNMENT_DELAY 8'd0;
	rg_rd_req_beat <= `BSV_ASSIGNMENT_DELAY 8'd0;
	rg_rd_request <= `BSV_ASSIGNMENT_DELAY 61'd0;
	rg_rd_resp_beat <= `BSV_ASSIGNMENT_DELAY 8'd0;
	rg_rd_state <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_wd_request <= `BSV_ASSIGNMENT_DELAY 37'd0;
	rg_wr_req_beat <= `BSV_ASSIGNMENT_DELAY 8'd0;
	rg_wr_request <= `BSV_ASSIGNMENT_DELAY 61'd0;
	rg_wr_resp_beat <= `BSV_ASSIGNMENT_DELAY 8'd0;
	rg_wr_state <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (rg_accum_data_EN)
	  rg_accum_data <= `BSV_ASSIGNMENT_DELAY rg_accum_data_D_IN;
	if (rg_accum_err_EN)
	  rg_accum_err <= `BSV_ASSIGNMENT_DELAY rg_accum_err_D_IN;
	if (rg_accum_mask_EN)
	  rg_accum_mask <= `BSV_ASSIGNMENT_DELAY rg_accum_mask_D_IN;
	if (rg_child_rd_burst_EN)
	  rg_child_rd_burst <= `BSV_ASSIGNMENT_DELAY rg_child_rd_burst_D_IN;
	if (rg_child_rd_req_count_EN)
	  rg_child_rd_req_count <= `BSV_ASSIGNMENT_DELAY
	      rg_child_rd_req_count_D_IN;
	if (rg_child_rd_res_count_EN)
	  rg_child_rd_res_count <= `BSV_ASSIGNMENT_DELAY
	      rg_child_rd_res_count_D_IN;
	if (rg_child_wr_burst_EN)
	  rg_child_wr_burst <= `BSV_ASSIGNMENT_DELAY rg_child_wr_burst_D_IN;
	if (rg_child_wr_req_count_EN)
	  rg_child_wr_req_count <= `BSV_ASSIGNMENT_DELAY
	      rg_child_wr_req_count_D_IN;
	if (rg_child_wr_res_count_EN)
	  rg_child_wr_res_count <= `BSV_ASSIGNMENT_DELAY
	      rg_child_wr_res_count_D_IN;
	if (rg_rd_req_beat_EN)
	  rg_rd_req_beat <= `BSV_ASSIGNMENT_DELAY rg_rd_req_beat_D_IN;
	if (rg_rd_request_EN)
	  rg_rd_request <= `BSV_ASSIGNMENT_DELAY rg_rd_request_D_IN;
	if (rg_rd_resp_beat_EN)
	  rg_rd_resp_beat <= `BSV_ASSIGNMENT_DELAY rg_rd_resp_beat_D_IN;
	if (rg_rd_state_EN)
	  rg_rd_state <= `BSV_ASSIGNMENT_DELAY rg_rd_state_D_IN;
	if (rg_wd_request_EN)
	  rg_wd_request <= `BSV_ASSIGNMENT_DELAY rg_wd_request_D_IN;
	if (rg_wr_req_beat_EN)
	  rg_wr_req_beat <= `BSV_ASSIGNMENT_DELAY rg_wr_req_beat_D_IN;
	if (rg_wr_request_EN)
	  rg_wr_request <= `BSV_ASSIGNMENT_DELAY rg_wr_request_D_IN;
	if (rg_wr_resp_beat_EN)
	  rg_wr_resp_beat <= `BSV_ASSIGNMENT_DELAY rg_wr_resp_beat_D_IN;
	if (rg_wr_state_EN)
	  rg_wr_state <= `BSV_ASSIGNMENT_DELAY rg_wr_state_D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    rg_accum_data = 32'hAAAAAAAA;
    rg_accum_err = 2'h2;
    rg_accum_mask = 4'hA;
    rg_child_rd_burst = 8'hAA;
    rg_child_rd_req_count = 8'hAA;
    rg_child_rd_res_count = 8'hAA;
    rg_child_wr_burst = 8'hAA;
    rg_child_wr_req_count = 8'hAA;
    rg_child_wr_res_count = 8'hAA;
    rg_rd_req_beat = 8'hAA;
    rg_rd_request = 61'h0AAAAAAAAAAAAAAA;
    rg_rd_resp_beat = 8'hAA;
    rg_rd_state = 1'h0;
    rg_wd_request = 37'h0AAAAAAAAA;
    rg_wr_req_beat = 8'hAA;
    rg_wr_request = 61'h0AAAAAAAAAAAAAAA;
    rg_wr_resp_beat = 8'hAA;
    rg_wr_state = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_frm_axi)
	begin
	  TASK_testplusargs___d11 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_frm_axi)
	begin
	  TASK_testplusargs___d12 = $test$plusargs("mbridge");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_frm_axi)
	begin
	  TASK_testplusargs___d13 = $test$plusargs("l0");
	  #0;
	end
    TASK_testplusargs_1_OR_TASK_testplusargs_2_AND_ETC___d20 =
	(TASK_testplusargs___d11 ||
	 TASK_testplusargs___d12 && TASK_testplusargs___d13) &&
	axi_xactor_f_arfifo_D_OUT[20:18] == 3'b0;
    TASK_testplusargs_1_OR_TASK_testplusargs_2_AND_ETC___d22 =
	(TASK_testplusargs___d11 ||
	 TASK_testplusargs___d12 && TASK_testplusargs___d13) &&
	axi_xactor_f_arfifo_D_OUT[20:18] == 3'b001;
    TASK_testplusargs_1_OR_TASK_testplusargs_2_AND_ETC___d24 =
	(TASK_testplusargs___d11 ||
	 TASK_testplusargs___d12 && TASK_testplusargs___d13) &&
	axi_xactor_f_arfifo_D_OUT[20:18] == 3'b010;
    TASK_testplusargs_1_OR_TASK_testplusargs_2_AND_ETC___d26 =
	(TASK_testplusargs___d11 ||
	 TASK_testplusargs___d12 && TASK_testplusargs___d13) &&
	axi_xactor_f_arfifo_D_OUT[20:18] == 3'b011;
    TASK_testplusargs_1_OR_TASK_testplusargs_2_AND_ETC___d28 =
	(TASK_testplusargs___d11 ||
	 TASK_testplusargs___d12 && TASK_testplusargs___d13) &&
	axi_xactor_f_arfifo_D_OUT[20:18] == 3'b100;
    TASK_testplusargs_1_OR_TASK_testplusargs_2_AND_ETC___d30 =
	(TASK_testplusargs___d11 ||
	 TASK_testplusargs___d12 && TASK_testplusargs___d13) &&
	axi_xactor_f_arfifo_D_OUT[20:18] == 3'b101;
    TASK_testplusargs_1_OR_TASK_testplusargs_2_AND_ETC___d32 =
	(TASK_testplusargs___d11 ||
	 TASK_testplusargs___d12 && TASK_testplusargs___d13) &&
	axi_xactor_f_arfifo_D_OUT[20:18] == 3'b110;
    TASK_testplusargs_1_OR_TASK_testplusargs_2_AND_ETC___d46 =
	(TASK_testplusargs___d11 ||
	 TASK_testplusargs___d12 && TASK_testplusargs___d13) &&
	axi_xactor_f_arfifo_D_OUT[20:18] != 3'b0 &&
	axi_xactor_f_arfifo_D_OUT[20:18] != 3'b001 &&
	axi_xactor_f_arfifo_D_OUT[20:18] != 3'b010 &&
	axi_xactor_f_arfifo_D_OUT[20:18] != 3'b011 &&
	axi_xactor_f_arfifo_D_OUT[20:18] != 3'b100 &&
	axi_xactor_f_arfifo_D_OUT[20:18] != 3'b101 &&
	axi_xactor_f_arfifo_D_OUT[20:18] != 3'b110;
    TASK_testplusargs_1_OR_TASK_testplusargs_2_AND_ETC___d49 =
	(TASK_testplusargs___d11 ||
	 TASK_testplusargs___d12 && TASK_testplusargs___d13) &&
	axi_xactor_f_arfifo_D_OUT[17:16] == 2'b0;
    TASK_testplusargs_1_OR_TASK_testplusargs_2_AND_ETC___d51 =
	(TASK_testplusargs___d11 ||
	 TASK_testplusargs___d12 && TASK_testplusargs___d13) &&
	axi_xactor_f_arfifo_D_OUT[17:16] == 2'b01;
    TASK_testplusargs_1_OR_TASK_testplusargs_2_AND_ETC___d53 =
	(TASK_testplusargs___d11 ||
	 TASK_testplusargs___d12 && TASK_testplusargs___d13) &&
	axi_xactor_f_arfifo_D_OUT[17:16] == 2'b10;
    TASK_testplusargs_1_OR_TASK_testplusargs_2_AND_ETC___d59 =
	(TASK_testplusargs___d11 ||
	 TASK_testplusargs___d12 && TASK_testplusargs___d13) &&
	axi_xactor_f_arfifo_D_OUT[17:16] != 2'b0 &&
	axi_xactor_f_arfifo_D_OUT[17:16] != 2'b01 &&
	axi_xactor_f_arfifo_D_OUT[17:16] != 2'b10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_frm_axi)
	begin
	  v__h2130 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_frm_axi &&
	  (TASK_testplusargs___d11 ||
	   TASK_testplusargs___d12 && TASK_testplusargs___d13))
	$fwrite(32'h80000002, "[%10d", v__h2130, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_frm_axi &&
	  (TASK_testplusargs___d11 ||
	   TASK_testplusargs___d12 && TASK_testplusargs___d13))
	$fwrite(32'h80000002, "Axi2AxiL: Axi4-Read:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_frm_axi &&
	  (TASK_testplusargs___d11 ||
	   TASK_testplusargs___d12 && TASK_testplusargs___d13))
	$fwrite(32'h80000002,
		"{araddr:%0h",
		axi_xactor_f_arfifo_D_OUT[60:29],
		",arlen:%0d",
		axi_xactor_f_arfifo_D_OUT[28:21]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_frm_axi &&
	  (TASK_testplusargs___d11 ||
	   TASK_testplusargs___d12 && TASK_testplusargs___d13))
	$fwrite(32'h80000002, ",");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_frm_axi &&
	  TASK_testplusargs_1_OR_TASK_testplusargs_2_AND_ETC___d20)
	$fwrite(32'h80000002, "sz1");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_frm_axi &&
	  TASK_testplusargs_1_OR_TASK_testplusargs_2_AND_ETC___d22)
	$fwrite(32'h80000002, "sz2");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_frm_axi &&
	  TASK_testplusargs_1_OR_TASK_testplusargs_2_AND_ETC___d24)
	$fwrite(32'h80000002, "sz4");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_frm_axi &&
	  TASK_testplusargs_1_OR_TASK_testplusargs_2_AND_ETC___d26)
	$fwrite(32'h80000002, "sz8");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_frm_axi &&
	  TASK_testplusargs_1_OR_TASK_testplusargs_2_AND_ETC___d28)
	$fwrite(32'h80000002, "sz16");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_frm_axi &&
	  TASK_testplusargs_1_OR_TASK_testplusargs_2_AND_ETC___d30)
	$fwrite(32'h80000002, "sz32");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_frm_axi &&
	  TASK_testplusargs_1_OR_TASK_testplusargs_2_AND_ETC___d32)
	$fwrite(32'h80000002, "sz64");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_frm_axi &&
	  TASK_testplusargs_1_OR_TASK_testplusargs_2_AND_ETC___d46)
	$fwrite(32'h80000002, "sz128");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_frm_axi &&
	  (TASK_testplusargs___d11 ||
	   TASK_testplusargs___d12 && TASK_testplusargs___d13))
	$fwrite(32'h80000002, ",");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_frm_axi &&
	  TASK_testplusargs_1_OR_TASK_testplusargs_2_AND_ETC___d49)
	$fwrite(32'h80000002, "fixed");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_frm_axi &&
	  TASK_testplusargs_1_OR_TASK_testplusargs_2_AND_ETC___d51)
	$fwrite(32'h80000002, "incr");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_frm_axi &&
	  TASK_testplusargs_1_OR_TASK_testplusargs_2_AND_ETC___d53)
	$fwrite(32'h80000002, "wrap");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_frm_axi &&
	  TASK_testplusargs_1_OR_TASK_testplusargs_2_AND_ETC___d59)
	$fwrite(32'h80000002, "burst:%0d", axi_xactor_f_arfifo_D_OUT[17:16]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_frm_axi &&
	  (TASK_testplusargs___d11 ||
	   TASK_testplusargs___d12 && TASK_testplusargs___d13))
	$fwrite(32'h80000002, "}");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_frm_axi &&
	  (TASK_testplusargs___d11 ||
	   TASK_testplusargs___d12 && TASK_testplusargs___d13))
	$fwrite(32'h80000002, "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_frm_axi)
	begin
	  TASK_testplusargs___d60 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_frm_axi)
	begin
	  TASK_testplusargs___d61 = $test$plusargs("mbridge");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_frm_axi)
	begin
	  TASK_testplusargs___d62 = $test$plusargs("l0");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_frm_axi)
	begin
	  v__h2335 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_frm_axi &&
	  (TASK_testplusargs___d60 ||
	   TASK_testplusargs___d61 && TASK_testplusargs___d62))
	$fwrite(32'h80000002, "[%10d", v__h2335, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_frm_axi &&
	  (TASK_testplusargs___d60 ||
	   TASK_testplusargs___d61 && TASK_testplusargs___d62))
	$fwrite(32'h80000002, "Axi2AxiL: Axi4-Lite-Read  :");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_frm_axi &&
	  (TASK_testplusargs___d60 ||
	   TASK_testplusargs___d61 && TASK_testplusargs___d62))
	$fwrite(32'h80000002,
		"{araddr:%0h",
		axi_xactor_f_arfifo_D_OUT[60:29],
		"}");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_frm_axi &&
	  (TASK_testplusargs___d60 ||
	   TASK_testplusargs___d61 && TASK_testplusargs___d62))
	$fwrite(32'h80000002, "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_rd_burst_req)
	begin
	  TASK_testplusargs___d100 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_rd_burst_req)
	begin
	  TASK_testplusargs___d101 = $test$plusargs("mbridge");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_rd_burst_req)
	begin
	  TASK_testplusargs___d102 = $test$plusargs("l0");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_rd_burst_req)
	begin
	  v__h2921 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_rd_burst_req &&
	  (TASK_testplusargs___d100 ||
	   TASK_testplusargs___d101 && TASK_testplusargs___d102))
	$fwrite(32'h80000002, "[%10d", v__h2921, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_rd_burst_req &&
	  (TASK_testplusargs___d100 ||
	   TASK_testplusargs___d101 && TASK_testplusargs___d102))
	$fwrite(32'h80000002,
		"Axi2AxiL: Axi4-RdBurst Addr:%h Count:%d",
		axil_request_araddr__h2845,
		rg_rd_req_beat);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_rd_burst_req &&
	  (TASK_testplusargs___d100 ||
	   TASK_testplusargs___d101 && TASK_testplusargs___d102))
	$fwrite(32'h80000002, "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_rd_burst_req)
	begin
	  TASK_testplusargs___d106 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_rd_burst_req)
	begin
	  TASK_testplusargs___d107 = $test$plusargs("mbridge");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_rd_burst_req)
	begin
	  TASK_testplusargs___d108 = $test$plusargs("l0");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_rd_burst_req)
	begin
	  v__h3068 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_rd_burst_req &&
	  (TASK_testplusargs___d106 ||
	   TASK_testplusargs___d107 && TASK_testplusargs___d108))
	$fwrite(32'h80000002, "[%10d", v__h3068, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_rd_burst_req &&
	  (TASK_testplusargs___d106 ||
	   TASK_testplusargs___d107 && TASK_testplusargs___d108))
	$fwrite(32'h80000002, "Axi2AxiL: New Axi4-Lite-Read  :");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_rd_burst_req &&
	  (TASK_testplusargs___d106 ||
	   TASK_testplusargs___d107 && TASK_testplusargs___d108))
	$fwrite(32'h80000002, "{araddr:%0h", axil_request_araddr__h2845, "}");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_rd_burst_req &&
	  (TASK_testplusargs___d106 ||
	   TASK_testplusargs___d107 && TASK_testplusargs___d108))
	$fwrite(32'h80000002, "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_rd_burst_req)
	begin
	  TASK_testplusargs___d112 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_rd_burst_req)
	begin
	  TASK_testplusargs___d113 = $test$plusargs("mbridge");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_rd_burst_req)
	begin
	  TASK_testplusargs___d114 = $test$plusargs("l0");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_rd_burst_req)
	begin
	  v__h3209 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_rd_burst_req &&
	  (TASK_testplusargs___d112 ||
	   TASK_testplusargs___d113 && TASK_testplusargs___d114))
	$fwrite(32'h80000002, "[%10d", v__h3209, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_rd_burst_req &&
	  (TASK_testplusargs___d112 ||
	   TASK_testplusargs___d113 && TASK_testplusargs___d114))
	$fwrite(32'h80000002,
		"Axi2AxiL: Child:%d ChildReq:%d",
		rg_child_rd_burst,
		rg_child_rd_req_count);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_rd_burst_req &&
	  (TASK_testplusargs___d112 ||
	   TASK_testplusargs___d113 && TASK_testplusargs___d114))
	$fwrite(32'h80000002, "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_response_to_axi)
	begin
	  TASK_testplusargs___d134 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_response_to_axi)
	begin
	  TASK_testplusargs___d135 = $test$plusargs("mbridge");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_response_to_axi)
	begin
	  TASK_testplusargs___d136 = $test$plusargs("l0");
	  #0;
	end
    TASK_testplusargs_34_OR_TASK_testplusargs_35_A_ETC___d141 =
	(TASK_testplusargs___d134 ||
	 TASK_testplusargs___d135 && TASK_testplusargs___d136) &&
	axil_xactor_f_rd_data_D_OUT[33:32] == 2'b0;
    TASK_testplusargs_34_OR_TASK_testplusargs_35_A_ETC___d143 =
	(TASK_testplusargs___d134 ||
	 TASK_testplusargs___d135 && TASK_testplusargs___d136) &&
	axil_xactor_f_rd_data_D_OUT[33:32] == 2'b01;
    TASK_testplusargs_34_OR_TASK_testplusargs_35_A_ETC___d145 =
	(TASK_testplusargs___d134 ||
	 TASK_testplusargs___d135 && TASK_testplusargs___d136) &&
	axil_xactor_f_rd_data_D_OUT[33:32] == 2'b10;
    TASK_testplusargs_34_OR_TASK_testplusargs_35_A_ETC___d151 =
	(TASK_testplusargs___d134 ||
	 TASK_testplusargs___d135 && TASK_testplusargs___d136) &&
	axil_xactor_f_rd_data_D_OUT[33:32] != 2'b0 &&
	axil_xactor_f_rd_data_D_OUT[33:32] != 2'b01 &&
	axil_xactor_f_rd_data_D_OUT[33:32] != 2'b10;
    TASK_testplusargs_34_OR_TASK_testplusargs_35_A_ETC___d152 =
	(TASK_testplusargs___d134 ||
	 TASK_testplusargs___d135 && TASK_testplusargs___d136) &&
	rg_rd_resp_beat == 8'd1;
    TASK_testplusargs_34_OR_TASK_testplusargs_35_A_ETC___d154 =
	(TASK_testplusargs___d134 ||
	 TASK_testplusargs___d135 && TASK_testplusargs___d136) &&
	rg_rd_resp_beat != 8'd1;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_response_to_axi)
	begin
	  v__h3664 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_response_to_axi &&
	  (TASK_testplusargs___d134 ||
	   TASK_testplusargs___d135 && TASK_testplusargs___d136))
	$fwrite(32'h80000002, "[%10d", v__h3664, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_response_to_axi &&
	  (TASK_testplusargs___d134 ||
	   TASK_testplusargs___d135 && TASK_testplusargs___d136))
	$fwrite(32'h80000002, "Axi2AxiL: AXI-RdResp:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_response_to_axi &&
	  (TASK_testplusargs___d134 ||
	   TASK_testplusargs___d135 && TASK_testplusargs___d136))
	$fwrite(32'h80000002, "{rresp:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_response_to_axi &&
	  TASK_testplusargs_34_OR_TASK_testplusargs_35_A_ETC___d141)
	$fwrite(32'h80000002, "okay");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_response_to_axi &&
	  TASK_testplusargs_34_OR_TASK_testplusargs_35_A_ETC___d143)
	$fwrite(32'h80000002, "exokay");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_response_to_axi &&
	  TASK_testplusargs_34_OR_TASK_testplusargs_35_A_ETC___d145)
	$fwrite(32'h80000002, "slverr");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_response_to_axi &&
	  TASK_testplusargs_34_OR_TASK_testplusargs_35_A_ETC___d151)
	$fwrite(32'h80000002, "decerr");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_response_to_axi &&
	  (TASK_testplusargs___d134 ||
	   TASK_testplusargs___d135 && TASK_testplusargs___d136))
	$fwrite(32'h80000002,
		",rdata:%0h",
		axil_xactor_f_rd_data_D_OUT[31:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_response_to_axi &&
	  TASK_testplusargs_34_OR_TASK_testplusargs_35_A_ETC___d152)
	$fwrite(32'h80000002, ",rlast");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_response_to_axi &&
	  TASK_testplusargs_34_OR_TASK_testplusargs_35_A_ETC___d154)
	$fwrite(32'h80000002, ",..");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_response_to_axi &&
	  (TASK_testplusargs___d134 ||
	   TASK_testplusargs___d135 && TASK_testplusargs___d136))
	$fwrite(32'h80000002, "}");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_response_to_axi &&
	  (TASK_testplusargs___d134 ||
	   TASK_testplusargs___d135 && TASK_testplusargs___d136))
	$fwrite(32'h80000002, "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_response_to_axi)
	begin
	  TASK_testplusargs___d160 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_response_to_axi)
	begin
	  TASK_testplusargs___d161 = $test$plusargs("mbridge");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_response_to_axi)
	begin
	  TASK_testplusargs___d162 = $test$plusargs("l0");
	  #0;
	end
    TASK_testplusargs_60_OR_TASK_testplusargs_61_A_ETC___d166 =
	(TASK_testplusargs___d160 ||
	 TASK_testplusargs___d161 && TASK_testplusargs___d162) &&
	axil_xactor_f_rd_data_D_OUT[33:32] == 2'b0;
    TASK_testplusargs_60_OR_TASK_testplusargs_61_A_ETC___d167 =
	(TASK_testplusargs___d160 ||
	 TASK_testplusargs___d161 && TASK_testplusargs___d162) &&
	axil_xactor_f_rd_data_D_OUT[33:32] == 2'b01;
    TASK_testplusargs_60_OR_TASK_testplusargs_61_A_ETC___d168 =
	(TASK_testplusargs___d160 ||
	 TASK_testplusargs___d161 && TASK_testplusargs___d162) &&
	axil_xactor_f_rd_data_D_OUT[33:32] == 2'b10;
    TASK_testplusargs_60_OR_TASK_testplusargs_61_A_ETC___d169 =
	(TASK_testplusargs___d160 ||
	 TASK_testplusargs___d161 && TASK_testplusargs___d162) &&
	axil_xactor_f_rd_data_D_OUT[33:32] != 2'b0 &&
	axil_xactor_f_rd_data_D_OUT[33:32] != 2'b01 &&
	axil_xactor_f_rd_data_D_OUT[33:32] != 2'b10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_response_to_axi)
	begin
	  v__h3949 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_response_to_axi &&
	  (TASK_testplusargs___d160 ||
	   TASK_testplusargs___d161 && TASK_testplusargs___d162))
	$fwrite(32'h80000002, "[%10d", v__h3949, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_response_to_axi &&
	  (TASK_testplusargs___d160 ||
	   TASK_testplusargs___d161 && TASK_testplusargs___d162))
	$fwrite(32'h80000002,
		"Axi2AxiL: AXI4L-Resp: Count:%2d",
		rg_rd_resp_beat);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_response_to_axi &&
	  (TASK_testplusargs___d160 ||
	   TASK_testplusargs___d161 && TASK_testplusargs___d162))
	$fwrite(32'h80000002, "{rresp:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_response_to_axi &&
	  TASK_testplusargs_60_OR_TASK_testplusargs_61_A_ETC___d166)
	$fwrite(32'h80000002, "okay");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_response_to_axi &&
	  TASK_testplusargs_60_OR_TASK_testplusargs_61_A_ETC___d167)
	$fwrite(32'h80000002, "exokay");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_response_to_axi &&
	  TASK_testplusargs_60_OR_TASK_testplusargs_61_A_ETC___d168)
	$fwrite(32'h80000002, "slverr");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_response_to_axi &&
	  TASK_testplusargs_60_OR_TASK_testplusargs_61_A_ETC___d169)
	$fwrite(32'h80000002, "decerr");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_response_to_axi &&
	  (TASK_testplusargs___d160 ||
	   TASK_testplusargs___d161 && TASK_testplusargs___d162))
	$fwrite(32'h80000002,
		",rdata:%0h",
		axil_xactor_f_rd_data_D_OUT[31:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_response_to_axi &&
	  (TASK_testplusargs___d160 ||
	   TASK_testplusargs___d161 && TASK_testplusargs___d162))
	$fwrite(32'h80000002, "}");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_response_to_axi &&
	  (TASK_testplusargs___d160 ||
	   TASK_testplusargs___d161 && TASK_testplusargs___d162))
	$fwrite(32'h80000002, "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_response_to_axi)
	begin
	  TASK_testplusargs___d170 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_response_to_axi)
	begin
	  TASK_testplusargs___d171 = $test$plusargs("mbridge");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_response_to_axi)
	begin
	  TASK_testplusargs___d172 = $test$plusargs("l0");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_response_to_axi)
	begin
	  v__h4113 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_response_to_axi &&
	  (TASK_testplusargs___d170 ||
	   TASK_testplusargs___d171 && TASK_testplusargs___d172))
	$fwrite(32'h80000002, "[%10d", v__h4113, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_response_to_axi &&
	  (TASK_testplusargs___d170 ||
	   TASK_testplusargs___d171 && TASK_testplusargs___d172))
	$fwrite(32'h80000002,
		"Axi2AxiL: Child:%d ChildRes:%d Mask:%b Accum:%h",
		rg_child_rd_burst,
		rg_child_rd_res_count,
		rg_accum_mask,
		rg_accum_data);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_read_response_to_axi &&
	  (TASK_testplusargs___d170 ||
	   TASK_testplusargs___d171 && TASK_testplusargs___d172))
	$fwrite(32'h80000002, "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_frm_axi)
	begin
	  TASK_testplusargs___d196 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_frm_axi)
	begin
	  TASK_testplusargs___d197 = $test$plusargs("mbridge");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_frm_axi)
	begin
	  TASK_testplusargs___d198 = $test$plusargs("l0");
	  #0;
	end
    TASK_testplusargs_96_OR_TASK_testplusargs_97_A_ETC___d204 =
	(TASK_testplusargs___d196 ||
	 TASK_testplusargs___d197 && TASK_testplusargs___d198) &&
	axi_xactor_f_awfifo_D_OUT[20:18] == 3'b0;
    TASK_testplusargs_96_OR_TASK_testplusargs_97_A_ETC___d206 =
	(TASK_testplusargs___d196 ||
	 TASK_testplusargs___d197 && TASK_testplusargs___d198) &&
	axi_xactor_f_awfifo_D_OUT[20:18] == 3'b001;
    TASK_testplusargs_96_OR_TASK_testplusargs_97_A_ETC___d208 =
	(TASK_testplusargs___d196 ||
	 TASK_testplusargs___d197 && TASK_testplusargs___d198) &&
	axi_xactor_f_awfifo_D_OUT[20:18] == 3'b010;
    TASK_testplusargs_96_OR_TASK_testplusargs_97_A_ETC___d210 =
	(TASK_testplusargs___d196 ||
	 TASK_testplusargs___d197 && TASK_testplusargs___d198) &&
	axi_xactor_f_awfifo_D_OUT[20:18] == 3'b011;
    TASK_testplusargs_96_OR_TASK_testplusargs_97_A_ETC___d212 =
	(TASK_testplusargs___d196 ||
	 TASK_testplusargs___d197 && TASK_testplusargs___d198) &&
	axi_xactor_f_awfifo_D_OUT[20:18] == 3'b100;
    TASK_testplusargs_96_OR_TASK_testplusargs_97_A_ETC___d214 =
	(TASK_testplusargs___d196 ||
	 TASK_testplusargs___d197 && TASK_testplusargs___d198) &&
	axi_xactor_f_awfifo_D_OUT[20:18] == 3'b101;
    TASK_testplusargs_96_OR_TASK_testplusargs_97_A_ETC___d230 =
	(TASK_testplusargs___d196 ||
	 TASK_testplusargs___d197 && TASK_testplusargs___d198) &&
	axi_xactor_f_awfifo_D_OUT[20:18] != 3'b0 &&
	axi_xactor_f_awfifo_D_OUT[20:18] != 3'b001 &&
	axi_xactor_f_awfifo_D_OUT[20:18] != 3'b010 &&
	axi_xactor_f_awfifo_D_OUT[20:18] != 3'b011 &&
	axi_xactor_f_awfifo_D_OUT[20:18] != 3'b100 &&
	axi_xactor_f_awfifo_D_OUT[20:18] != 3'b101 &&
	axi_xactor_f_awfifo_D_OUT[20:18] != 3'b110;
    TASK_testplusargs_96_OR_TASK_testplusargs_97_A_ETC___d216 =
	(TASK_testplusargs___d196 ||
	 TASK_testplusargs___d197 && TASK_testplusargs___d198) &&
	axi_xactor_f_awfifo_D_OUT[20:18] == 3'b110;
    TASK_testplusargs_96_OR_TASK_testplusargs_97_A_ETC___d233 =
	(TASK_testplusargs___d196 ||
	 TASK_testplusargs___d197 && TASK_testplusargs___d198) &&
	axi_xactor_f_awfifo_D_OUT[17:16] == 2'b0;
    TASK_testplusargs_96_OR_TASK_testplusargs_97_A_ETC___d235 =
	(TASK_testplusargs___d196 ||
	 TASK_testplusargs___d197 && TASK_testplusargs___d198) &&
	axi_xactor_f_awfifo_D_OUT[17:16] == 2'b01;
    TASK_testplusargs_96_OR_TASK_testplusargs_97_A_ETC___d237 =
	(TASK_testplusargs___d196 ||
	 TASK_testplusargs___d197 && TASK_testplusargs___d198) &&
	axi_xactor_f_awfifo_D_OUT[17:16] == 2'b10;
    TASK_testplusargs_96_OR_TASK_testplusargs_97_A_ETC___d243 =
	(TASK_testplusargs___d196 ||
	 TASK_testplusargs___d197 && TASK_testplusargs___d198) &&
	axi_xactor_f_awfifo_D_OUT[17:16] != 2'b0 &&
	axi_xactor_f_awfifo_D_OUT[17:16] != 2'b01 &&
	axi_xactor_f_awfifo_D_OUT[17:16] != 2'b10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_frm_axi)
	begin
	  v__h4714 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_frm_axi &&
	  (TASK_testplusargs___d196 ||
	   TASK_testplusargs___d197 && TASK_testplusargs___d198))
	$fwrite(32'h80000002, "[%10d", v__h4714, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_frm_axi &&
	  (TASK_testplusargs___d196 ||
	   TASK_testplusargs___d197 && TASK_testplusargs___d198))
	$fwrite(32'h80000002, "Axi2AxiL: Axi4-Write:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_frm_axi &&
	  (TASK_testplusargs___d196 ||
	   TASK_testplusargs___d197 && TASK_testplusargs___d198))
	$fwrite(32'h80000002,
		"{awaddr:%0h,",
		axi_xactor_f_awfifo_D_OUT[60:29],
		"awlen:%0d",
		axi_xactor_f_awfifo_D_OUT[28:21]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_frm_axi &&
	  (TASK_testplusargs___d196 ||
	   TASK_testplusargs___d197 && TASK_testplusargs___d198))
	$fwrite(32'h80000002, ",");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_frm_axi &&
	  TASK_testplusargs_96_OR_TASK_testplusargs_97_A_ETC___d204)
	$fwrite(32'h80000002, "sz1");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_frm_axi &&
	  TASK_testplusargs_96_OR_TASK_testplusargs_97_A_ETC___d206)
	$fwrite(32'h80000002, "sz2");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_frm_axi &&
	  TASK_testplusargs_96_OR_TASK_testplusargs_97_A_ETC___d208)
	$fwrite(32'h80000002, "sz4");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_frm_axi &&
	  TASK_testplusargs_96_OR_TASK_testplusargs_97_A_ETC___d210)
	$fwrite(32'h80000002, "sz8");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_frm_axi &&
	  TASK_testplusargs_96_OR_TASK_testplusargs_97_A_ETC___d212)
	$fwrite(32'h80000002, "sz16");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_frm_axi &&
	  TASK_testplusargs_96_OR_TASK_testplusargs_97_A_ETC___d214)
	$fwrite(32'h80000002, "sz32");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_frm_axi &&
	  TASK_testplusargs_96_OR_TASK_testplusargs_97_A_ETC___d216)
	$fwrite(32'h80000002, "sz64");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_frm_axi &&
	  TASK_testplusargs_96_OR_TASK_testplusargs_97_A_ETC___d230)
	$fwrite(32'h80000002, "sz128");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_frm_axi &&
	  (TASK_testplusargs___d196 ||
	   TASK_testplusargs___d197 && TASK_testplusargs___d198))
	$fwrite(32'h80000002, ",");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_frm_axi &&
	  TASK_testplusargs_96_OR_TASK_testplusargs_97_A_ETC___d233)
	$fwrite(32'h80000002, "fixed");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_frm_axi &&
	  TASK_testplusargs_96_OR_TASK_testplusargs_97_A_ETC___d235)
	$fwrite(32'h80000002, "incr");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_frm_axi &&
	  TASK_testplusargs_96_OR_TASK_testplusargs_97_A_ETC___d237)
	$fwrite(32'h80000002, "wrap");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_frm_axi &&
	  TASK_testplusargs_96_OR_TASK_testplusargs_97_A_ETC___d243)
	$fwrite(32'h80000002, "burst:%0d", axi_xactor_f_awfifo_D_OUT[17:16]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_frm_axi &&
	  (TASK_testplusargs___d196 ||
	   TASK_testplusargs___d197 && TASK_testplusargs___d198))
	$fwrite(32'h80000002, "}");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_frm_axi &&
	  (TASK_testplusargs___d196 ||
	   TASK_testplusargs___d197 && TASK_testplusargs___d198))
	$fwrite(32'h80000002, "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_frm_axi)
	begin
	  TASK_testplusargs___d244 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_frm_axi)
	begin
	  TASK_testplusargs___d245 = $test$plusargs("mbridge");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_frm_axi)
	begin
	  TASK_testplusargs___d246 = $test$plusargs("l0");
	  #0;
	end
    TASK_testplusargs_44_OR_TASK_testplusargs_45_A_ETC___d253 =
	(TASK_testplusargs___d244 ||
	 TASK_testplusargs___d245 && TASK_testplusargs___d246) &&
	axi_xactor_f_wfifo_D_OUT[0];
    TASK_testplusargs_44_OR_TASK_testplusargs_45_A_ETC___d255 =
	(TASK_testplusargs___d244 ||
	 TASK_testplusargs___d245 && TASK_testplusargs___d246) &&
	!axi_xactor_f_wfifo_D_OUT[0];
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_frm_axi)
	begin
	  v__h4917 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_frm_axi &&
	  (TASK_testplusargs___d244 ||
	   TASK_testplusargs___d245 && TASK_testplusargs___d246))
	$fwrite(32'h80000002, "[%10d", v__h4917, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_frm_axi &&
	  (TASK_testplusargs___d244 ||
	   TASK_testplusargs___d245 && TASK_testplusargs___d246))
	$fwrite(32'h80000002, "Axi2AxiL: Axi4-Write: byte_index:%d", 2'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_frm_axi &&
	  (TASK_testplusargs___d244 ||
	   TASK_testplusargs___d245 && TASK_testplusargs___d246))
	$fwrite(32'h80000002,
		"{wdata:%0h,wstrb:%0h",
		axi_xactor_f_wfifo_D_OUT[36:5],
		axi_xactor_f_wfifo_D_OUT[4:1]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_frm_axi &&
	  TASK_testplusargs_44_OR_TASK_testplusargs_45_A_ETC___d253)
	$fwrite(32'h80000002, ",wlast");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_frm_axi &&
	  TASK_testplusargs_44_OR_TASK_testplusargs_45_A_ETC___d255)
	$fwrite(32'h80000002, ",..");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_frm_axi &&
	  (TASK_testplusargs___d244 ||
	   TASK_testplusargs___d245 && TASK_testplusargs___d246))
	$fwrite(32'h80000002, "}");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_frm_axi &&
	  (TASK_testplusargs___d244 ||
	   TASK_testplusargs___d245 && TASK_testplusargs___d246))
	$fwrite(32'h80000002, "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_frm_axi)
	begin
	  TASK_testplusargs___d256 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_frm_axi)
	begin
	  TASK_testplusargs___d257 = $test$plusargs("mbridge");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_frm_axi)
	begin
	  TASK_testplusargs___d258 = $test$plusargs("l0");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_frm_axi)
	begin
	  v__h5075 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_frm_axi &&
	  (TASK_testplusargs___d256 ||
	   TASK_testplusargs___d257 && TASK_testplusargs___d258))
	$fwrite(32'h80000002, "[%10d", v__h5075, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_frm_axi &&
	  (TASK_testplusargs___d256 ||
	   TASK_testplusargs___d257 && TASK_testplusargs___d258))
	$fwrite(32'h80000002, "Axi2AxiL: Axi4-Lite-Write  :");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_frm_axi &&
	  (TASK_testplusargs___d256 ||
	   TASK_testplusargs___d257 && TASK_testplusargs___d258))
	$fwrite(32'h80000002,
		"{awaddr:%0h,",
		axi_xactor_f_awfifo_D_OUT[60:29],
		"}");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_frm_axi &&
	  (TASK_testplusargs___d256 ||
	   TASK_testplusargs___d257 && TASK_testplusargs___d258))
	$fwrite(32'h80000002, "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_frm_axi)
	begin
	  TASK_testplusargs___d262 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_frm_axi)
	begin
	  TASK_testplusargs___d263 = $test$plusargs("mbridge");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_frm_axi)
	begin
	  TASK_testplusargs___d264 = $test$plusargs("l0");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_frm_axi)
	begin
	  v__h5216 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_frm_axi &&
	  (TASK_testplusargs___d262 ||
	   TASK_testplusargs___d263 && TASK_testplusargs___d264))
	$fwrite(32'h80000002, "[%10d", v__h5216, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_frm_axi &&
	  (TASK_testplusargs___d262 ||
	   TASK_testplusargs___d263 && TASK_testplusargs___d264))
	$fwrite(32'h80000002, "Axi2AxiL: Axi4-Lite-Write  :");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_frm_axi &&
	  (TASK_testplusargs___d262 ||
	   TASK_testplusargs___d263 && TASK_testplusargs___d264))
	$fwrite(32'h80000002,
		"{wdata:%0h,wstrb:%0h",
		axi_xactor_f_wfifo_D_OUT[36:5],
		axi_xactor_f_wfifo_D_OUT[4:1],
		"}");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_frm_axi &&
	  (TASK_testplusargs___d262 ||
	   TASK_testplusargs___d263 && TASK_testplusargs___d264))
	$fwrite(32'h80000002, "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_wr_burst_req)
	begin
	  TASK_testplusargs___d299 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_wr_burst_req)
	begin
	  TASK_testplusargs___d300 = $test$plusargs("mbridge");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_wr_burst_req)
	begin
	  TASK_testplusargs___d301 = $test$plusargs("l0");
	  #0;
	end
    TASK_testplusargs_99_OR_TASK_testplusargs_00_A_ETC___d305 =
	(TASK_testplusargs___d299 ||
	 TASK_testplusargs___d300 && TASK_testplusargs___d301) &&
	axi_xactor_f_wfifo_D_OUT[0];
    TASK_testplusargs_99_OR_TASK_testplusargs_00_A_ETC___d306 =
	(TASK_testplusargs___d299 ||
	 TASK_testplusargs___d300 && TASK_testplusargs___d301) &&
	!axi_xactor_f_wfifo_D_OUT[0];
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_wr_burst_req)
	begin
	  v__h5659 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_wr_burst_req &&
	  (TASK_testplusargs___d299 ||
	   TASK_testplusargs___d300 && TASK_testplusargs___d301))
	$fwrite(32'h80000002, "[%10d", v__h5659, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_wr_burst_req &&
	  (TASK_testplusargs___d299 ||
	   TASK_testplusargs___d300 && TASK_testplusargs___d301))
	$fwrite(32'h80000002, "Axi2AxiL: Axi4-Wr Poping Wd Request:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_wr_burst_req &&
	  (TASK_testplusargs___d299 ||
	   TASK_testplusargs___d300 && TASK_testplusargs___d301))
	$fwrite(32'h80000002,
		"{wdata:%0h,wstrb:%0h",
		axi_xactor_f_wfifo_D_OUT[36:5],
		axi_xactor_f_wfifo_D_OUT[4:1]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_wr_burst_req &&
	  TASK_testplusargs_99_OR_TASK_testplusargs_00_A_ETC___d305)
	$fwrite(32'h80000002, ",wlast");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_wr_burst_req &&
	  TASK_testplusargs_99_OR_TASK_testplusargs_00_A_ETC___d306)
	$fwrite(32'h80000002, ",..");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_wr_burst_req &&
	  (TASK_testplusargs___d299 ||
	   TASK_testplusargs___d300 && TASK_testplusargs___d301))
	$fwrite(32'h80000002, "}");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_wr_burst_req &&
	  (TASK_testplusargs___d299 ||
	   TASK_testplusargs___d300 && TASK_testplusargs___d301))
	$fwrite(32'h80000002, "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_wr_burst_req)
	begin
	  TASK_testplusargs___d309 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_wr_burst_req)
	begin
	  TASK_testplusargs___d310 = $test$plusargs("mbridge");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_wr_burst_req)
	begin
	  TASK_testplusargs___d311 = $test$plusargs("l0");
	  #0;
	end
    TASK_testplusargs_09_OR_TASK_testplusargs_10_A_ETC___d315 =
	(TASK_testplusargs___d309 ||
	 TASK_testplusargs___d310 && TASK_testplusargs___d311) &&
	axi_xactor_f_wfifo_D_OUT[0];
    TASK_testplusargs_09_OR_TASK_testplusargs_10_A_ETC___d316 =
	(TASK_testplusargs___d309 ||
	 TASK_testplusargs___d310 && TASK_testplusargs___d311) &&
	!axi_xactor_f_wfifo_D_OUT[0];
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_wr_burst_req)
	begin
	  v__h5879 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_wr_burst_req &&
	  (TASK_testplusargs___d309 ||
	   TASK_testplusargs___d310 && TASK_testplusargs___d311))
	$fwrite(32'h80000002, "[%10d", v__h5879, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_wr_burst_req &&
	  (TASK_testplusargs___d309 ||
	   TASK_testplusargs___d310 && TASK_testplusargs___d311))
	$fwrite(32'h80000002,
		"Axi2AxiL: New Axi4-Write Count:%d:",
		rg_wr_req_beat);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_wr_burst_req &&
	  (TASK_testplusargs___d309 ||
	   TASK_testplusargs___d310 && TASK_testplusargs___d311))
	$fwrite(32'h80000002,
		"{wdata:%0h,wstrb:%0h",
		axi_xactor_f_wfifo_D_OUT[36:5],
		axi_xactor_f_wfifo_D_OUT[4:1]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_wr_burst_req &&
	  TASK_testplusargs_09_OR_TASK_testplusargs_10_A_ETC___d315)
	$fwrite(32'h80000002, ",wlast");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_wr_burst_req &&
	  TASK_testplusargs_09_OR_TASK_testplusargs_10_A_ETC___d316)
	$fwrite(32'h80000002, ",..");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_wr_burst_req &&
	  (TASK_testplusargs___d309 ||
	   TASK_testplusargs___d310 && TASK_testplusargs___d311))
	$fwrite(32'h80000002, "}");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_wr_burst_req &&
	  (TASK_testplusargs___d309 ||
	   TASK_testplusargs___d310 && TASK_testplusargs___d311))
	$fwrite(32'h80000002, "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_wr_burst_req)
	begin
	  TASK_testplusargs___d317 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_wr_burst_req)
	begin
	  TASK_testplusargs___d318 = $test$plusargs("mbridge");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_wr_burst_req)
	begin
	  TASK_testplusargs___d319 = $test$plusargs("l0");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_wr_burst_req)
	begin
	  v__h6037 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_wr_burst_req &&
	  (TASK_testplusargs___d317 ||
	   TASK_testplusargs___d318 && TASK_testplusargs___d319))
	$fwrite(32'h80000002, "[%10d", v__h6037, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_wr_burst_req &&
	  (TASK_testplusargs___d317 ||
	   TASK_testplusargs___d318 && TASK_testplusargs___d319))
	$fwrite(32'h80000002, "Axi2AxiL: Axi4-Lite-Write  :");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_wr_burst_req &&
	  (TASK_testplusargs___d317 ||
	   TASK_testplusargs___d318 && TASK_testplusargs___d319))
	$fwrite(32'h80000002, "{awaddr:%0h,", axil_req_awaddr__h5777, "}");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_wr_burst_req &&
	  (TASK_testplusargs___d317 ||
	   TASK_testplusargs___d318 && TASK_testplusargs___d319))
	$fwrite(32'h80000002, "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_wr_burst_req)
	begin
	  TASK_testplusargs___d323 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_wr_burst_req)
	begin
	  TASK_testplusargs___d324 = $test$plusargs("mbridge");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_wr_burst_req)
	begin
	  TASK_testplusargs___d325 = $test$plusargs("l0");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_wr_burst_req)
	begin
	  v__h6178 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_wr_burst_req &&
	  (TASK_testplusargs___d323 ||
	   TASK_testplusargs___d324 && TASK_testplusargs___d325))
	$fwrite(32'h80000002, "[%10d", v__h6178, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_wr_burst_req &&
	  (TASK_testplusargs___d323 ||
	   TASK_testplusargs___d324 && TASK_testplusargs___d325))
	$fwrite(32'h80000002,
		"Axi2AxiL: Child:%d ChildReq:%d",
		rg_child_wr_burst,
		rg_child_wr_req_count);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_send_wr_burst_req &&
	  (TASK_testplusargs___d323 ||
	   TASK_testplusargs___d324 && TASK_testplusargs___d325))
	$fwrite(32'h80000002, "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_response_to_axi)
	begin
	  TASK_testplusargs___d358 = $test$plusargs("fullverbose");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_response_to_axi)
	begin
	  TASK_testplusargs___d359 = $test$plusargs("mbridge");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_response_to_axi)
	begin
	  TASK_testplusargs___d360 = $test$plusargs("l0");
	  #0;
	end
    TASK_testplusargs_58_OR_TASK_testplusargs_59_A_ETC___d365 =
	(TASK_testplusargs___d358 ||
	 TASK_testplusargs___d359 && TASK_testplusargs___d360) &&
	axil_xactor_f_wr_resp_D_OUT == 2'b0;
    TASK_testplusargs_58_OR_TASK_testplusargs_59_A_ETC___d367 =
	(TASK_testplusargs___d358 ||
	 TASK_testplusargs___d359 && TASK_testplusargs___d360) &&
	axil_xactor_f_wr_resp_D_OUT == 2'b01;
    TASK_testplusargs_58_OR_TASK_testplusargs_59_A_ETC___d368 =
	(TASK_testplusargs___d358 ||
	 TASK_testplusargs___d359 && TASK_testplusargs___d360) &&
	axil_xactor_f_wr_resp_D_OUT == 2'b10;
    TASK_testplusargs_58_OR_TASK_testplusargs_59_A_ETC___d374 =
	(TASK_testplusargs___d358 ||
	 TASK_testplusargs___d359 && TASK_testplusargs___d360) &&
	axil_xactor_f_wr_resp_D_OUT != 2'b0 &&
	axil_xactor_f_wr_resp_D_OUT != 2'b01 &&
	axil_xactor_f_wr_resp_D_OUT != 2'b10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_response_to_axi)
	begin
	  v__h6584 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_response_to_axi &&
	  (TASK_testplusargs___d358 ||
	   TASK_testplusargs___d359 && TASK_testplusargs___d360))
	$fwrite(32'h80000002, "[%10d", v__h6584, "] ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_response_to_axi &&
	  (TASK_testplusargs___d358 ||
	   TASK_testplusargs___d359 && TASK_testplusargs___d360))
	$fwrite(32'h80000002,
		"Axi2AxiL: AXI4L-Resp: Count:%2d",
		rg_wr_resp_beat);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_response_to_axi &&
	  (TASK_testplusargs___d358 ||
	   TASK_testplusargs___d359 && TASK_testplusargs___d360))
	$fwrite(32'h80000002, "{bresp:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_response_to_axi &&
	  TASK_testplusargs_58_OR_TASK_testplusargs_59_A_ETC___d365)
	$fwrite(32'h80000002, "okay");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_response_to_axi &&
	  TASK_testplusargs_58_OR_TASK_testplusargs_59_A_ETC___d367)
	$fwrite(32'h80000002, "exokay");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_response_to_axi &&
	  TASK_testplusargs_58_OR_TASK_testplusargs_59_A_ETC___d368)
	$fwrite(32'h80000002, "slverr");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_response_to_axi &&
	  TASK_testplusargs_58_OR_TASK_testplusargs_59_A_ETC___d374)
	$fwrite(32'h80000002, "decerr");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_response_to_axi &&
	  (TASK_testplusargs___d358 ||
	   TASK_testplusargs___d359 && TASK_testplusargs___d360))
	$fwrite(32'h80000002, "}");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_write_response_to_axi &&
	  (TASK_testplusargs___d358 ||
	   TASK_testplusargs___d359 && TASK_testplusargs___d360))
	$fwrite(32'h80000002, "\n");
  end
  // synopsys translate_on
endmodule  // mkaxi2axil_bridge

